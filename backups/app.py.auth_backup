import streamlit as st
from openai import OpenAI  # Make sure this is using the OpenAI v1 API
from dotenv import load_dotenv
import os
from notion_client import Client
from datetime import datetime
from pydub import AudioSegment
import tempfile
import math
import glob
from anthropic import Anthropic
import requests  # for Grok API
import shutil
from pathlib import Path
import hashlib
import uuid
import sqlite3
import jwt
from datetime import datetime, timedelta
import time
import re
import json
import streamlit.components.v1 as components
import concurrent.futures
import threading
import openai
import logging
import sys
import soundfile as sf

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("whisperforge.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("whisperforge")

# This must be the very first st.* command
st.set_page_config(
    page_title="WhisperForge | Audio to Content Platform",
    page_icon="üéôÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load environment variables
load_dotenv()

# Database setup
def get_db_connection():
    conn = sqlite3.connect('whisperforge.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def create_prompts_table():
    """Create a table to store prompts in the database"""
    conn = get_db_connection()
    conn.execute('''
        CREATE TABLE IF NOT EXISTS prompts (
            id INTEGER PRIMARY KEY,
            user_id TEXT NOT NULL,
            prompt_type TEXT NOT NULL,
            content TEXT NOT NULL,
            is_active INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, prompt_type)
        )
    ''')
    conn.commit()
    conn.close()

def init_db():
    conn = get_db_connection()
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            api_keys TEXT,
            usage_quota INTEGER DEFAULT 60,  -- Minutes per month
            usage_current INTEGER DEFAULT 0,
            is_admin INTEGER DEFAULT 0,
            subscription_tier TEXT DEFAULT 'free'
        )
    ''')
    conn.commit()
    conn.close()
    
    # Now create_prompts_table is defined before being called
    create_prompts_table()

# Initialize database
init_db()

# Password hashing
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# JWT functions
def create_jwt_token(user_id):
    expiration = datetime.utcnow() + timedelta(hours=24)
    payload = {
        "user_id": user_id,
        "exp": expiration
    }
    secret = os.getenv("JWT_SECRET", "whisperforge-secret-key")
    token = jwt.encode(payload, secret, algorithm="HS256")
    return token

def validate_jwt_token(token):
    try:
        secret = os.getenv("JWT_SECRET", "whisperforge-secret-key")
        payload = jwt.decode(token, secret, algorithms=["HS256"])
        return payload["user_id"]
    except:
        return None

# Initialization of clients - will be called as needed with user-specific API keys
def get_openai_client():
    logger.debug("Entering get_openai_client function")
    api_key = get_api_key_for_service("openai")
    if not api_key:
        logger.error("OpenAI API key is not set")
        st.error("OpenAI API key is not set. Please add your API key in the settings.")
        return None
    
    logger.debug(f"Got API key (length: {len(api_key)})")
    
    # Log environment variables that might affect client initialization
    logger.debug("Checking environment variables that might affect client initialization:")
    for env_var in os.environ:
        if 'proxy' in env_var.lower() or 'http_' in env_var.lower() or 'openai' in env_var.lower():
            logger.debug(f"  Found environment variable: {env_var}")
    
    # Create client with just the API key, no extra parameters
    try:
        logger.debug("Attempting to initialize OpenAI client with ONLY api_key parameter")
        
        # Create a completely clean approach - don't use any environment variables
        client_kwargs = {'api_key': api_key}
        
        # Log what we're passing to OpenAI
        logger.debug(f"OpenAI initialization parameters: {client_kwargs}")
        
        # Try direct initialization as a last resort
        client = OpenAI(**client_kwargs)
        logger.debug("Successfully initialized OpenAI client")
        return client
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error initializing OpenAI client: {error_msg}")
        logger.exception("Full exception details:")
        
        # Try alternative initialization if 'proxies' is in the error
        if 'proxies' in error_msg:
            logger.debug("Trying alternative initialization approach due to proxies error")
            try:
                # Alternative approach - don't use OpenAI client class directly
                # Instead use a simple function-based approach
                
                # Define a simple function to make API requests directly
                def simple_transcribe(audio_file):
                    import requests
                    url = "https://api.openai.com/v1/audio/transcriptions"
                    headers = {
                        "Authorization": f"Bearer {api_key}"
                    }
                    files = {
                        "file": audio_file,
                        "model": (None, "whisper-1")
                    }
                    response = requests.post(url, headers=headers, files=files)
                    return response.json()
                
                # Create a minimal client object that just has the transcribe method
                class MinimalOpenAIClient:
                    def __init__(self, api_key):
                        self.api_key = api_key
                        self.audio = type('', (), {})()
                        self.audio.transcriptions = type('', (), {})()
                        self.audio.transcriptions.create = simple_transcribe
                
                logger.debug("Created minimal OpenAI client replacement")
                return MinimalOpenAIClient(api_key)
            except Exception as alt_e:
                logger.error(f"Alternative initialization also failed: {str(alt_e)}")
        
        st.error(f"Error initializing OpenAI client: {error_msg}")
        return None

def get_anthropic_client():
    api_key = get_api_key_for_service("anthropic")
    if not api_key:
        st.error("Anthropic API key is not set. Please add your API key in the settings.")
        return None
    return Anthropic(api_key=api_key)

def get_notion_client():
    api_key = get_api_key_for_service("notion")
    if not api_key:
        st.error("Notion API key is not set. Please add your API key in the settings.")
        return None
    return Client(auth=api_key)

def get_notion_database_id():
    api_keys = get_user_api_keys()
    db_id = api_keys.get("notion_database_id")
    if not db_id:
        db_id = os.getenv("NOTION_DATABASE_ID")
    return db_id

def get_grok_api_key():
    return get_api_key_for_service("grok")

# Available LLM models grouped by provider
LLM_MODELS = {
    "OpenAI": {
        "GPT-4 (Most Capable)": "gpt-4",
        "GPT-4 Turbo": "gpt-4-turbo-preview",
        "GPT-3.5 Turbo (Faster)": "gpt-3.5-turbo",
    },
    "Anthropic": {
        "Claude 3 Opus": "claude-3-opus-20240229",
        "Claude 3 Sonnet": "claude-3-sonnet-20240229",
        "Claude 3 Haiku": "claude-3-haiku-20240307",
    },
    "Grok": {
        "Grok-1": "grok-1",
    }
}

def local_css():
    """Apply refined cyberpunk styling inspired by Luma's interface"""
    with open('static/css/main.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    
    # Add the scanner line animation div
    st.markdown('<div class="scanner-line"></div>', unsafe_allow_html=True)

def load_user_knowledge_base(user):
    """Load knowledge base files for a specific user"""
    knowledge_base = {}
    kb_path = f'prompts/{user}/knowledge_base'
    
    if os.path.exists(kb_path):
        for file in os.listdir(kb_path):
            if file.endswith(('.txt', '.md')):
                with open(os.path.join(kb_path, file), 'r') as f:
                    name = os.path.splitext(file)[0].replace('_', ' ').title()
                    knowledge_base[name] = f.read()
    
    return knowledge_base

def load_prompts():
    """Load prompt templates from the prompts directory"""
    users = []
    users_prompts = {}  # Initialize as dictionary
    
    # Check if prompts directory exists
    if not os.path.exists("prompts"):
        os.makedirs("prompts")
        st.info("Created prompts directory. Please add prompt templates.")
        return users, users_prompts
    
    # Get list of user directories
    user_dirs = [d for d in os.listdir("prompts") if os.path.isdir(os.path.join("prompts", d))]
    
    # If no user directories, create a default one
    if not user_dirs:
        default_dir = os.path.join("prompts", "default_user")
        os.makedirs(default_dir, exist_ok=True)
        user_dirs = ["default_user"]
        
    # Add users to the list
    for user in user_dirs:
        users.append(user)
        users_prompts[user] = {}  # Initialize each user with an empty dictionary
        
        # Get prompt files for each user
        user_dir = os.path.join("prompts", user)
        prompt_files = []
        try:
            prompt_files = [f for f in os.listdir(user_dir) if f.endswith('.md')]
        except Exception as e:
            st.warning(f"Error accessing prompts for {user}: {str(e)}")
        
        # Load each prompt file
        for prompt_file in prompt_files:
            prompt_name = os.path.splitext(prompt_file)[0]
            try:
                with open(os.path.join(user_dir, prompt_file), 'r') as f:
                    prompt_content = f.read()
                users_prompts[user][prompt_name] = prompt_content
            except Exception as e:
                st.warning(f"Error loading prompt {prompt_file}: {str(e)}")
    
    return users, users_prompts

def apply_prompt(text, prompt_content, provider, model, user_knowledge=None):
    """Apply a specific prompt using the selected model and provider, incorporating user knowledge"""
    try:
        prompt_parts = prompt_content.split('## Prompt')
        if len(prompt_parts) > 1:
            prompt_text = prompt_parts[1].strip()
        else:
            prompt_text = prompt_content

        # Include knowledge base context if available
        system_prompt = prompt_text
        if user_knowledge:
            knowledge_context = "\n\n".join([
                f"## {name}\n{content}" 
                for name, content in user_knowledge.items()
            ])
            system_prompt = f"""Use the following knowledge base to inform your analysis and match the user's style and perspective:

{knowledge_context}

When analyzing the content, please incorporate these perspectives and style guidelines.

Original Prompt:
{prompt_text}"""

        if provider == "OpenAI":
            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{text}"}
                ],
                max_tokens=1500
            )
            return response.choices[0].message.content

        elif provider == "Anthropic":
            response = anthropic_client.messages.create(
                model=model,
                max_tokens=1500,
                system=system_prompt,
                messages=[
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{text}"}
                ]
            )
            return response.content[0].text

        elif provider == "Grok":
            # Grok API endpoint (you'll need to adjust this based on actual Grok API documentation)
            headers = {
                "Authorization": f"Bearer {GROK_API_KEY}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{text}"}
                ]
            }
            response = requests.post(
                "https://api.grok.x.ai/v1/chat/completions",  # Adjust URL as needed
                headers=headers,
                json=payload
            )
            return response.json()["choices"][0]["message"]["content"]

    except Exception as e:
        st.error(f"Analysis error with {provider} {model}: {str(e)}")
        return None

def chunk_audio(audio_path, target_size_mb=25):
    """Split audio file into chunks of approximately target_size_mb"""
    try:
        # Log the start of the chunking process
        logger.debug(f"Starting to chunk audio file: {audio_path}")
        logger.debug(f"Target chunk size: {target_size_mb}MB")
        
        # Create temporary directory for chunks
        temp_dir = tempfile.mkdtemp()
        logger.debug(f"Created temporary directory for chunks: {temp_dir}")
        
        # Load the audio file
        try:
            audio = AudioSegment.from_file(audio_path)
            logger.debug(f"Successfully loaded audio file. Duration: {len(audio)}ms")
        except Exception as load_error:
            logger.error(f"Failed to load audio file: {str(load_error)}")
            st.error(f"Error loading audio file: {str(load_error)}")
            return [], None
            
        # Get file size and adjust chunk size for very large files
        file_size_mb = os.path.getsize(audio_path) / (1024 * 1024)
        chunks = []
        
        # Adjust strategy based on file size
        if file_size_mb > 100:  # For very large files
            # Use silence detection for more natural chunking
            logger.debug(f"Large file detected ({file_size_mb:.2f} MB). Using silence-based chunking.")
            
            # Detect silences in the audio
            try:
                silence_thresh = -40  # dB
                min_silence_len = 700  # ms
                
                # Get silence ranges
                silence_ranges = silence.detect_silence(
                    audio, 
                    min_silence_len=min_silence_len, 
                    silence_thresh=silence_thresh
                )
                
                # Convert silence ranges to chunk points
                chunk_points = [0]  # Start with the beginning of the audio
                
                for start, end in silence_ranges:
                    # Use the middle of each silence as a potential split point
                    chunk_points.append((start + end) // 2)
                
                # Add the end of the audio
                chunk_points.append(len(audio))
                
                # Ensure we don't create too many tiny chunks for very large files
                # Filter points to create chunks of roughly the target size
                target_chunk_len_ms = target_size_mb * 5 * 60 * 1000 / file_size_mb  # Scale based on file size
                
                filtered_points = [chunk_points[0]]  # Always keep the first point
                current_pos = chunk_points[0]
                
                for point in chunk_points[1:]:
                    if point - current_pos >= target_chunk_len_ms or point == chunk_points[-1]:
                        filtered_points.append(point)
                        current_pos = point
                
                logger.debug(f"Created {len(filtered_points)-1} chunk boundaries using silence detection")
                chunk_points = filtered_points
                
                # Create progress bar
                progress_bar = st.progress(0)
                
                # Process each chunk
                for i in range(len(chunk_points) - 1):
                    start = chunk_points[i]
                    end = chunk_points[i+1]
                    
                    # Skip if segment is too short (less than 1 second)
                    if end - start < 1000:
                        logger.debug(f"Skipping segment {i+1} (too short: {end-start}ms)")
                        continue
                    
                    try:
                        chunk = audio[start:end]
                        chunk_path = os.path.join(temp_dir, f'chunk_{i}.mp3')
                        
                        # Export with specific parameters that work well with OpenAI's API
                        chunk.export(
                            chunk_path, 
                            format='mp3',
                            parameters=["-ac", "1", "-ar", "16000"]  # Mono, 16kHz
                        )
                        
                        # Verify the exported file exists and has content
                        if os.path.exists(chunk_path) and os.path.getsize(chunk_path) > 0:
                            chunks.append(chunk_path)
                            logger.debug(f"Created chunk {i+1}: {chunk_path} (Duration: {len(chunk)}ms)")
                        else:
                            logger.warning(f"Failed to create chunk {i+1}: File is empty or doesn't exist")
                    except Exception as chunk_error:
                        logger.error(f"Error creating chunk {i+1}: {str(chunk_error)}")
                    
                    # Update progress
                    progress = (i + 1) / (len(chunk_points) - 1)
                    progress_bar.progress(progress)
                
                # Clear progress bar
                progress_bar.empty()
                
            except Exception as silence_error:
                logger.error(f"Error in silence detection: {str(silence_error)}")
                # Fall back to simple chunking if silence detection fails
                st.warning("Silence detection failed, falling back to uniform chunking")
        
        # Either silence detection failed or it's a smaller file, use simple chunking
        if not chunks:
            logger.debug("Using uniform chunking method")
            
            # Calculate chunk size based on target MB
            target_chunk_bytes = target_size_mb * 1024 * 1024
            bytes_per_ms = file_size_mb * 1024 * 1024 / len(audio)
            chunk_length_ms = int(target_chunk_bytes / bytes_per_ms)
            
            # Ensure chunk length is reasonable
            if chunk_length_ms < 5000:  # 5 seconds minimum
                chunk_length_ms = 5000
            elif chunk_length_ms > 300000:  # 5 minutes maximum
                chunk_length_ms = 300000
                
            logger.debug(f"Uniform chunk length: {chunk_length_ms}ms")
            
            # Create progress bar
            progress_bar = st.progress(0)
            
            # Create chunks of uniform size
            chunk_count = 0
            for i in range(0, len(audio), chunk_length_ms):
                # Skip if less than 1 second is remaining
                if i + 1000 > len(audio):
                    logger.debug(f"Skipping final segment (too short: {len(audio) - i}ms)")
                    continue
                
                try:
                    # Extract chunk
                    chunk = audio[i:min(i + chunk_length_ms, len(audio))]
                    
                    # Save chunk with index in filename
                    chunk_path = os.path.join(temp_dir, f'chunk_{chunk_count}.mp3')
                    
                    # Export with specific parameters for OpenAI
                    chunk.export(
                        chunk_path, 
                        format='mp3',
                        parameters=["-ac", "1", "-ar", "16000"]  # Mono, 16kHz
                    )
                    
                    # Verify the exported file exists and has content
                    if os.path.exists(chunk_path) and os.path.getsize(chunk_path) > 0:
                        chunks.append(chunk_path)
                        chunk_count += 1
                        logger.debug(f"Created chunk {chunk_count}: {chunk_path} (Duration: {len(chunk)}ms)")
                    else:
                        logger.warning(f"Failed to create chunk at position {i}ms: File is empty or doesn't exist")
                except Exception as chunk_error:
                    logger.error(f"Error creating chunk at position {i}ms: {str(chunk_error)}")
                
                # Update progress
                progress = (i + chunk_length_ms) / len(audio)
                progress_bar.progress(min(progress, 1.0))
            
            # Clear progress bar
            progress_bar.empty()
        
        # Check if any chunks were created
        if not chunks:
            logger.error("Failed to create any valid chunks from the audio file")
            st.error("Failed to process the audio file into chunks.")
            return [], None
            
        logger.debug(f"Successfully created {len(chunks)} chunks from audio file")
        return chunks, temp_dir
        
    except Exception as e:
        logger.error(f"Error in chunk_audio: {str(e)}", exc_info=True)
        st.error(f"Error chunking audio: {str(e)}")
        return [], None

def transcribe_chunk(chunk_path, i, total_chunks):
    """Transcribe a single audio chunk using OpenAI's API"""
    try:
        # Log the processing of this chunk
        logger.debug(f"Processing chunk {i+1}/{total_chunks} ({os.path.getsize(chunk_path)/1024:.1f}KB): {chunk_path}")
        
        # Get API key
        api_key = get_api_key_for_service("openai")
        if not api_key:
            error_msg = "OpenAI API key is not configured"
            logger.error(error_msg)
            return f"[Error: {error_msg}]"
        
        # Check if file exists
        if not os.path.exists(chunk_path):
            error_msg = f"Chunk file not found: {chunk_path}"
            logger.error(error_msg)
            return f"[Error: {error_msg}]"
        
        # Check if file size is valid
        file_size = os.path.getsize(chunk_path)
        if file_size == 0:
            error_msg = f"Chunk file is empty: {chunk_path}"
            logger.error(error_msg)
            return f"[Error: {error_msg}]"
        
        # Try direct API call
        try:
            logger.debug(f"Making direct API call for chunk {i+1}")
            
            import requests
            
            headers = {
                "Authorization": f"Bearer {api_key}"
            }
            
            url = "https://api.openai.com/v1/audio/transcriptions"
            
            # Set transcription options
            model = st.session_state.get('transcription_model', 'whisper-1')
            
            # Create form data
            files = {
                'file': open(chunk_path, 'rb')
            }
            
            data = {
                'model': model,
                'response_format': 'text'
            }
            
            # Check for language code in session state
            if st.session_state.get('language_code') and st.session_state.get('language_code') != 'auto':
                data['language'] = st.session_state.get('language_code')
                logger.debug(f"Setting language for chunk {i+1} to: {data['language']}")
            
            # Make the API request
            response = requests.post(url, headers=headers, files=files, data=data)
            
            # Handle different response codes
            if response.status_code == 200:
                transcript = response.text
                logger.debug(f"Successfully transcribed chunk {i+1} (Length: {len(transcript)} chars)")
                return transcript
                
            elif response.status_code == 429:
                error_msg = f"Rate limit exceeded for chunk {i+1}"
                logger.error(f"API Rate Limit (429): {error_msg}")
                return f"[Rate limit exceeded: Try again later for chunk {i+1}]"
                
            elif response.status_code == 401:
                error_msg = f"Invalid API key when processing chunk {i+1}"
                logger.error(f"API Authentication Error (401): {error_msg}")
                return f"[Failed: Invalid API key for chunk {i+1}]"
                
            else:
                # Try to parse error details
                try:
                    error_data = response.json()
                    error_msg = error_data.get('error', {}).get('message', f"Unknown API error for chunk {i+1}")
                except:
                    error_msg = f"API error (status {response.status_code}) for chunk {i+1}: {response.text}"
                
                logger.error(f"API Error in chunk {i+1}: {error_msg}")
                return f"[Error: {error_msg}]"
                
        except requests.exceptions.RequestException as req_error:
            # Handle connection errors
            error_msg = f"API request failed for chunk {i+1}: {str(req_error)}"
            logger.error(error_msg)
            
            # Try OpenAI client as fallback
            try:
                logger.debug(f"Attempting fallback with client library for chunk {i+1}")
                
                from openai import OpenAI
                
                # Create client
                client = OpenAI(api_key=api_key)
                
                # Set options
                options = {}
                if st.session_state.get('language_code') and st.session_state.get('language_code') != 'auto':
                    options['language'] = st.session_state.get('language_code')
                
                # Get model preference or use default
                model = st.session_state.get('transcription_model', 'whisper-1')
                
                with open(chunk_path, "rb") as audio_file:
                    # Use client library as fallback
                    response = client.audio.transcriptions.create(
                        model=model,
                        file=audio_file,
                        response_format="text",
                        **options
                    )
                
                # If we get here, the fallback worked
                transcript = response
                logger.debug(f"Fallback succeeded for chunk {i+1} (Length: {len(transcript)} chars)")
                return transcript
                
            except Exception as client_error:
                error_msg = f"Fallback also failed for chunk {i+1}: {str(client_error)}"
                logger.error(error_msg)
                return f"[Failed: {error_msg}]"
    
    except Exception as e:
        error_msg = f"Unexpected error processing chunk {i+1}: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return f"[Error: {error_msg}]"

def generate_title(transcript):
    """Generate a descriptive 5-7 word title based on the transcript"""
    try:
        openai_client = get_openai_client()
        if not openai_client:
            return "Untitled Audio Transcription"
            
        prompt = f"""Create a clear, descriptive title (5-7 words) that captures the main topic of this transcript:
        Transcript: {transcript[:1000]}...
        
        Return only the title, no quotes or additional text."""
        
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant that creates concise, descriptive titles."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=50,
            temperature=0.3
        )
        
        return response.choices[0].message.content.strip()
    except Exception as e:
        return "Audio Transcription"

def generate_summary(transcript):
    """Generate a one-sentence summary of the audio content"""
    try:
        openai_client = get_openai_client()
        if not openai_client:
            return "Summary of audio content"
            
        prompt = f"""Create a single, insightful sentence that summarizes the key message or main insight from this transcript:
        Transcript: {transcript[:1000]}...
        
        Return only the summary sentence, no additional text."""
        
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant that creates concise, insightful summaries."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100,
            temperature=0.3
        )
        
        return response.choices[0].message.content.strip()
    except Exception as e:
        return "Summary of audio content"

def generate_short_title(text):
    """Generate a descriptive title from the transcript using Claude 3.7 Sonnet"""
    try:
        # Use Anthropic Claude 3.7 Sonnet for generating title
        api_key = get_api_key_for_service("anthropic")
        if not api_key:
            return "Untitled Audio Transcription"
        
        # Create a better prompt for title generation
        prompt = f"""Create a descriptive, specific title (5-8 words) that accurately captures the core topic or theme of this content. 
        The title should be informative and specific enough that someone reading it would immediately understand what the content is about.
        
        Content sample:
        {text[:2000]}...
        
        Return only the title, no quotes, asterisks, or additional text. The title should be engaging but primarily informative and descriptive.
        """
        
        # Use direct API call to Claude
        result = direct_anthropic_completion(prompt, api_key, model="claude-3-7-sonnet-20250219")
        
        if result and not result.startswith("Error"):
            # Clean the title
            title = result.strip().rstrip('.').strip('"').strip("'")
            return title
        else:
            return "Untitled Audio Transcription"
    except Exception as e:
        logger.exception("Error generating title:")
        return "Untitled Audio Transcription"

def chunk_text_for_notion(text, chunk_size=1900):
    """Split text into chunks that respect Notion's character limit"""
    if not text:
        return []
    return [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]

def create_content_notion_entry(title, transcript, wisdom=None, outline=None, social_content=None, image_prompts=None, article=None):
    """Create a new entry in the Notion database with all content sections"""
    try:
        # Get Notion client and database ID
        notion_client = get_notion_client()
        if not notion_client:
            st.error("Notion API key is not configured. Please add your API key in the settings.")
            return False
            
        NOTION_DATABASE_ID = get_notion_database_id()
        if not NOTION_DATABASE_ID:
            st.error("Notion Database ID is not configured. Please add it in the settings.")
            return False
        
        # Initialize audio_filename at the beginning of the function
        audio_filename = "None"
        if hasattr(st.session_state, 'audio_file') and st.session_state.audio_file:
            audio_filename = st.session_state.audio_file.name
        
        # Generate AI title if none provided
        if not title or title.startswith("Transcription -") or title.startswith("Content -"):
            ai_title = generate_short_title(transcript)
            title = f"WHISPER: {ai_title}"
        
        # Generate tags for the content
        content_tags = generate_content_tags(transcript, wisdom)
        
        # Generate summary
        summary = generate_summary(transcript)
        
        # Track model usage for metadata
        used_models = []
        if hasattr(st.session_state, 'ai_provider') and hasattr(st.session_state, 'ai_model'):
            if st.session_state.ai_provider and st.session_state.ai_model:
                used_models.append(f"{st.session_state.ai_provider} {st.session_state.ai_model}")
        if transcript:  # If we have a transcript, we likely used Whisper
            used_models.append("OpenAI Whisper-1")
            
        # Estimate token usage
        total_tokens = estimate_token_usage(transcript, wisdom, outline, social_content, image_prompts, article)
        
        # Format content with toggles
        content = []
        
        # Add summary section with AI-generated summary
        content.extend([
            {
                "type": "callout",
                "callout": {
                    "rich_text": [{"type": "text", "text": {"content": summary}}],
                    "color": "purple_background",
                    "icon": {
                        "type": "emoji",
                        "emoji": "üíú"
                    }
                }
            },
            {
                "type": "divider",
                "divider": {}
            }
        ])
        
        # Add Transcript section with chunked content and color
        content.extend([
            {
                "type": "toggle",
                "toggle": {
                    "rich_text": [{"type": "text", "text": {"content": "Transcription"}}],
                    "color": "default", # dark gray/black
                    "children": [
                        {
                            "type": "paragraph",
                            "paragraph": {
                                "rich_text": [{"type": "text", "text": {"content": chunk}}]
                            }
                        } for chunk in chunk_text_for_notion(transcript)
                    ]
                }
            }
        ])

        # Add Wisdom section if available
        if wisdom:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Wisdom"}}],
                        "color": "brown_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(wisdom)
                        ]
                    }
                }
            ])

        # Add Socials section with golden brown background
        if social_content:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Socials"}}],
                        "color": "orange_background", # closest to golden brown
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(social_content)
                        ]
                    }
                }
            ])

        # Add Image Prompts with green background
        if image_prompts:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Image Prompts"}}],
                        "color": "green_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(image_prompts)
                        ]
                    }
                }
            ])

        # Add Outline with blue background
        if outline:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Outline"}}],
                        "color": "blue_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(outline)
                        ]
                    }
                }
            ])

        # Add Draft Post with purple background
        if article:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Draft Post"}}],
                        "color": "purple_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(article)
                        ]
                    }
                }
            ])

        # Add Original Audio section with maroon/red background if audio file exists
        if audio_filename != "None":
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Original Audio"}}],
                        "color": "red_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": audio_filename}}]
                                }
                            }
                        ]
                    }
                }
            ])

        # Add metadata section
            content.extend([
                {
                    "type": "divider",
                    "divider": {}
                },
                {
                    "type": "heading_2",
                    "heading_2": {
                    "rich_text": [{"type": "text", "text": {"content": "Metadata"}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Original Audio:** {audio_filename}"}}]
                }
            },
                            {
                                "type": "paragraph",
                                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Created:** {datetime.now().strftime('%Y-%m-%d %H:%M')}"}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Models Used:** {', '.join(used_models) if used_models else 'None'}"}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Estimated Tokens:** {total_tokens:,}"}}]
                    }
                }
            ])

        # Create the page in Notion
        response = notion_client.pages.create(
            parent={"database_id": NOTION_DATABASE_ID},
            properties={
                "Name": {"title": [{"text": {"content": title}}]},
                "Tags": {"multi_select": [{"name": tag} for tag in content_tags]},
            },
            children=content
        )
        
        # Make the Notion link clickable in the UI
        if response and isinstance(response, dict) and 'id' in response:
            page_id = response['id']
            page_url = f"https://notion.so/{page_id.replace('-', '')}"
            st.success(f"Successfully saved to Notion!")
            st.markdown(f"[Open in Notion]({page_url})")
            return page_url
        else:
            st.error("Notion API returned an invalid response")
            st.write("Response:", response)  # Debug info
            return False
            
    except Exception as e:
        st.error(f"Detailed error creating Notion entry: {str(e)}")
        return False

def estimate_token_usage(transcript, wisdom=None, outline=None, social_content=None, image_prompts=None, article=None):
    """Estimate token usage for all content generated"""
    # Approximate token count (roughly 4 chars per token for English)
    token_count = 0
    
    # Count tokens in all content
    if transcript:
        token_count += len(transcript) / 4
    if wisdom:
        token_count += len(wisdom) / 4
    if outline:
        token_count += len(outline) / 4
    if social_content:
        token_count += len(social_content) / 4
    if image_prompts:
        token_count += len(image_prompts) / 4
    if article:
        token_count += len(article) / 4
        
    # Add approximate prompt tokens and overhead
    token_count += 1000  # For system prompts, etc.
    
    return int(token_count)

def generate_content_tags(transcript, wisdom=None):
    """Generate relevant tags based on content"""
    try:
        # Use Anthropic Claude 3.7 Sonnet for generating tags
        api_key = get_api_key_for_service("anthropic")
        if not api_key:
            return ["audio", "transcription", "content", "notes", "whisperforge"]
            
        # Create prompt for tag generation
        content_sample = transcript[:1000] if transcript else ""
        wisdom_sample = wisdom[:500] if wisdom else ""
        
        prompt = f"""Based on the following content, generate 5-7 descriptive, specific tags that accurately capture the main topics, themes, and concepts. 
        Each tag can be 1-3 words and should be specific enough to categorize the content effectively.

        Content sample:
        {content_sample}

        Key insights:
        {wisdom_sample}

        Return only the tags, separated by commas, with each tag being 1-3 words. Make them descriptive and specific to this content.
        For example, instead of just 'technology', use 'AI ethics' or 'blockchain adoption'.
        """
        
        # Use direct API call to Claude
        result = direct_anthropic_completion(prompt, api_key, model="claude-3-7-sonnet-20250219")
        
        if result and not result.startswith("Error"):
            # Split the response into individual tags and clean them
            tags = [tag.strip() for tag in result.split(',') if tag.strip()]
            
            # Ensure we have at least 3 tags but no more than 7
            while len(tags) < 3:
                tags.append("whisperforge content")
            
            return tags[:7]
        else:
            return ["audio content", "transcription", "whisperforge", "ai generated", "content notes"]
    except Exception as e:
        logger.exception("Error generating content tags:")
        # Return default tags if there's an error
        return ["audio", "transcription", "content", "notes", "whisperforge"]

def get_available_openai_models():
    """Get current list of available OpenAI models"""
    try:
        openai_client = get_openai_client()
        if not openai_client:
            st.error("OpenAI API key is not configured.")
            return {}

        models = openai_client.models.list()
        gpt_models = {
            model.id: model.id for model in models 
            if any(x in model.id for x in ['gpt-4', 'gpt-3.5'])
        }
        return gpt_models
    except Exception as e:
        st.error(f"Error fetching OpenAI models: {str(e)}")
        return {}

def get_available_anthropic_models():
    """Get current list of available Anthropic models"""
    # Current as of May 2024
    return {
        "Claude 3.7 Sonnet": "claude-3-7-sonnet-20250219",
        "Claude 3 Opus": "claude-3-opus-20240229",
        "Claude 3 Sonnet": "claude-3-sonnet-20240229", 
        "Claude 3 Haiku": "claude-3-haiku-20240307",
    }

def get_available_grok_models():
    """Get current list of available Grok models"""
    # Current as of March 2024
    return {
        "Grok-1": "grok-1",
    }

# Update the LLM_MODELS dictionary dynamically
def get_current_models():
    return {
        "OpenAI": get_available_openai_models(),
        "Anthropic": get_available_anthropic_models(),
        "Grok": get_available_grok_models(),
    }

# Add this function to get available users
def get_available_users():
    """Get a list of available users by scanning the prompts directory"""
    users = []
    prompts_dir = 'prompts'
    
    if not os.path.exists(prompts_dir):
        os.makedirs(prompts_dir)
        return ["Default"]
    
    # Get all user directories
    for user_dir in os.listdir(prompts_dir):
        user_path = os.path.join(prompts_dir, user_dir)
        if os.path.isdir(user_path) and not user_dir.startswith('.'):
            users.append(user_dir)
    
    # If no users found, return a default user
    if not users:
        users = ["Default"]
    
    return users

# Make sure this function exists and works properly
def get_custom_prompt(user, prompt_type, users_prompts, default_prompts):
    """Safely retrieve a custom prompt for the user, or use default if not available"""
    # Ensure users_prompts is a dictionary
    if not isinstance(users_prompts, dict):
        return default_prompts.get(prompt_type, "")
        
    # Get user's prompts or empty dict if user not found
    user_prompts = users_prompts.get(user, {})
    if not isinstance(user_prompts, dict):
        return default_prompts.get(prompt_type, "")
    
    # Return the custom prompt if available, otherwise use the default
    return user_prompts.get(prompt_type, default_prompts.get(prompt_type, ""))

# Add this function to save custom prompts
def save_custom_prompt(user, prompt_type, prompt_content):
    """Save a custom prompt for a specific user and prompt type"""
    user_dir = os.path.join("prompts", user, "custom_prompts")
    os.makedirs(user_dir, exist_ok=True)
    
    prompt_path = os.path.join(user_dir, f"{prompt_type}.txt")
    try:
        with open(prompt_path, "w") as f:
            f.write(prompt_content)
        return True
    except Exception as e:
        st.error(f"Error saving custom prompt: {str(e)}")
        return False

def list_knowledge_base_files(user):
    """List knowledge base files for a specific user"""
    kb_path = os.path.join('prompts', user, 'knowledge_base')
    files = []
    
    if os.path.exists(kb_path):
        for file in os.listdir(kb_path):
            if file.endswith(('.txt', '.md')) and not file.startswith('.'):
                files.append(os.path.join(kb_path, file))
    
    return files

def get_available_models(provider):
    """Get available models for a given provider"""
    try:
        openai_client = get_openai_client()
        
        # Default models in case API calls fail
        default_models = {
            "OpenAI": ["gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo"],
            "Anthropic": ["claude-3-7-sonnet-20250219", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "Grok": ["grok-1"]
        }
        
        if provider == "OpenAI":
            try:
                if openai_client:
                    models = openai_client.models.list()
                    available_models = []
                    
                    # Filter for chat and text generation models
                    for model in models.data:
                        model_id = model.id
                        if ("gpt" in model_id.lower() and 
                            "instruct" not in model_id.lower() and 
                            any(ver in model_id.lower() for ver in ["3.5", "4"])):
                            available_models.append(model_id)
                    
                    # Add standard model options
                    standard_models = [
                        "gpt-4", 
                        "gpt-4-turbo-preview", 
                        "gpt-3.5-turbo"
                    ]
                    
                    # Add standard models not in the list
                    for model in standard_models:
                        if model not in available_models:
                            available_models.append(model)
                    
                    return sorted(available_models)
                else:
                    return default_models["OpenAI"]
            except:
                # Return default OpenAI models if API call fails
                return default_models["OpenAI"]
        
        elif provider == "Anthropic":
            # Anthropic doesn't have a list models endpoint in the Python SDK
            return default_models["Anthropic"]
        
        elif provider == "Grok":
            # Grok currently only has one model
            return default_models["Grok"]
        
        # Return empty list for unknown providers
        return []
    except Exception as e:
        st.error(f"Error fetching models: {str(e)}")
        # Return default models if available
        if provider in default_models:
            return default_models[provider]
        return []

def configure_prompts(selected_user):
    """Configure custom prompts for the selected user"""
    st.subheader("Custom Prompts")
    st.write("Configure custom prompts for different content types:")
    
    # List of prompt types
    prompt_types = ["wisdom_extraction", "summary", "outline_creation", "social_media", "image_prompts"]
    
    for prompt_type in prompt_types:
        # Get current prompt for the user and type
        current_prompt = get_prompt(selected_user, prompt_type)
        
        # Display text area for editing
        new_prompt = st.text_area(
            f"{prompt_type.replace('_', ' ').title()}",
            value=current_prompt,
            height=150,
            key=f"prompt_{prompt_type}"
        )
        
        # Save button for this prompt
        if st.button(f"Save {prompt_type.replace('_', ' ').title()} Prompt"):
            # Save the prompt to database
            save_prompt(selected_user, prompt_type, new_prompt)
            st.success(f"Saved custom {prompt_type} prompt for {selected_user}")

# Add functions to access prompts from the database
def save_prompt(user_id, prompt_type, content):
    """Save or update a prompt in the database"""
    conn = get_db_connection()
    conn.execute(
        '''INSERT INTO prompts (user_id, prompt_type, content, updated_at) 
           VALUES (?, ?, ?, CURRENT_TIMESTAMP)
           ON CONFLICT(user_id, prompt_type) 
           DO UPDATE SET content = ?, updated_at = CURRENT_TIMESTAMP''',
        (user_id, prompt_type, content, content)
    )
    conn.commit()
    conn.close()
    
    # Also save to filesystem for backward compatibility
    user_dir = os.path.join("prompts", user_id)
    os.makedirs(user_dir, exist_ok=True)
    
    with open(os.path.join(user_dir, f"{prompt_type}.md"), "w") as f:
        f.write(content)

def get_prompt(user_id, prompt_type):
    """Get active prompt for user from database, falling back to default if none exists"""
    conn = get_db_connection()
    row = conn.execute(
        'SELECT content FROM prompts WHERE user_id = ? AND prompt_type = ? AND is_active = 1', 
        (user_id, prompt_type)
    ).fetchone()
    conn.close()
    
    if row:
        return row['content']
    else:
        # Fall back to default prompt from filesystem
        return load_default_prompt(prompt_type)

def load_default_prompt(prompt_type):
    """Load a default prompt from the filesystem"""
    default_path = os.path.join("prompts", "default", f"{prompt_type}.md")
    if os.path.exists(default_path):
        with open(default_path, 'r') as f:
            return f.read()
    return DEFAULT_PROMPTS.get(prompt_type, "")

def transcribe_large_file(file_path):
    """Process a large audio file by chunking it and transcribing each chunk with concurrent processing"""
    try:
        # Start with info message
        st.info("Processing large audio file in chunks...")
        logger.info(f"Starting transcription of large file: {file_path}")
        
        # Split audio into chunks
        chunks, temp_dir = chunk_audio(file_path)
        
        # Validate chunks
        if not chunks or len(chunks) == 0:
            error_msg = "Failed to create audio chunks for processing"
            logger.error(error_msg)
            st.error(error_msg)
            return ""
        
        # Create progress indicators
        progress_text = st.empty()
        overall_status = st.empty()
        progress_bar = st.progress(0)
        
        # Log and display info about chunks
        logger.info(f"Created {len(chunks)} chunks for processing")
        overall_status.info(f"Beginning transcription of {len(chunks)} audio segments...")
        
        # Determine optimal number of concurrent processes
        import os
        import concurrent.futures
        import time
        
        # Adjust concurrency based on number of chunks
        if len(chunks) > 20:
            max_workers = min(6, len(chunks))  # Reduced to 6 workers for very large files
        elif len(chunks) > 10:
            max_workers = min(4, len(chunks))  # Reduced to 4 workers for medium files
        else:
            max_workers = min(2, len(chunks))  # Reduced to 2 workers for smaller files
            
        logger.debug(f"Using {max_workers} concurrent workers for {len(chunks)} chunks")
        
        # Set up shared variables for progress tracking
        import threading
        lock = threading.Lock()
        progress_tracker = {
            'completed': 0,
            'success': 0,
            'failed': 0,
            'results': [None] * len(chunks),
            'errors': []  # Track detailed error information
        }
        
        # Create a thread-safe structure for progress updates
        progress_updates_lock = threading.Lock()
        progress_updates = []
        
        # Function for processing a single chunk with progress tracking
        def process_chunk(args):
            chunk_path, idx, total = args
            try:
                # Process the chunk
                chunk_text = transcribe_chunk(chunk_path, idx, total)
                
                # Update progress tracker
                with lock:
                    progress_tracker['completed'] += 1
                    
                    # Check for error markers or empty results
                    is_error = False
                    if not chunk_text:
                        is_error = True
                        progress_tracker['errors'].append(f"Empty result for chunk {idx+1}")
                    elif any(error_marker in chunk_text for error_marker in ["[Error", "[Failed", "[Rate limit"]):
                        is_error = True
                        progress_tracker['errors'].append(chunk_text)
                    
                    if is_error:
                        progress_tracker['failed'] += 1
                    else:
                        progress_tracker['success'] += 1
                    
                    progress_tracker['results'][idx] = chunk_text
                    
                    # Calculate progress but don't update UI directly from thread
                    # This avoids NoSessionContext errors
                    completed = progress_tracker['completed']
                    progress = completed / total
                    
                    # Add to a separate list that the main thread can safely read
                    with progress_updates_lock:
                        progress_updates.append({
                            'progress': progress,
                            'completed': completed,
                            'total': total,
                            'success': progress_tracker['success'],
                            'failed': progress_tracker['failed']
                        })
                
                # Clean up chunk file
                try:
                    os.remove(chunk_path)
                    logger.debug(f"Removed chunk file: {chunk_path}")
                except Exception as clean_error:
                    logger.warning(f"Failed to remove chunk file {chunk_path}: {str(clean_error)}")
                
                return chunk_text
            except Exception as e:
                error_msg = f"Error processing chunk {idx+1}: {str(e)}"
                logger.error(error_msg, exc_info=True)
                
                with lock:
                    progress_tracker['completed'] += 1
                    progress_tracker['failed'] += 1
                    progress_tracker['errors'].append(error_msg)
                    progress_tracker['results'][idx] = f"[Error processing chunk {idx+1}: {str(e)}]"
                    
                    # Calculate progress but don't update UI directly
                    completed = progress_tracker['completed']
                    progress = completed / total
                    with progress_updates_lock:
                        progress_updates.append({
                            'progress': progress,
                            'completed': completed,
                            'total': total,
                            'success': progress_tracker['success'],
                            'failed': progress_tracker['failed']
                        })
                
                # Try to clean up even on error
                try:
                    if os.path.exists(chunk_path):
                        os.remove(chunk_path)
                except:
                    pass
                    
                return f"[Error processing chunk {idx+1}: {str(e)}]"
        
        # Process chunks with concurrent execution
        chunk_args = [(chunk_path, i, len(chunks)) for i, chunk_path in enumerate(chunks)]
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            # Show processing message
            st.info(f"Transcribing audio using {max_workers} concurrent processes...")
            logger.debug(f"Starting {max_workers} workers for {len(chunks)} chunks")
            
            # Start all tasks
            future_to_chunk = {executor.submit(process_chunk, arg): arg for arg in chunk_args}
            
            # Create a thread-safe way to track cancellation
            should_terminate = threading.Event()
            
            # Main loop to update UI from the main thread while tasks are running
            while not should_terminate.is_set():
                # Check if all tasks are done
                all_done = all(future.done() for future in future_to_chunk)
                
                # Process any UI updates from worker threads
                updates_to_process = []
                with progress_updates_lock:
                    if progress_updates:
                        updates_to_process = progress_updates.copy()
                        progress_updates.clear()
                
                # Apply UI updates from the main thread
                if updates_to_process:
                    # Use the latest update
                    latest = updates_to_process[-1]
                    
                    # Update progress indicators (safely from main thread)
                    progress_bar.progress(latest['progress'])
                    progress_text.text(f"Transcribing: {latest['completed']}/{latest['total']} chunks processed...")
                    
                    # Update overall status occasionally
                    if latest['completed'] % 2 == 0 or latest['completed'] == latest['total'] or all_done:
                        overall_status.info(f"Progress: {latest['completed']}/{latest['total']} chunks "
                                           f"({latest['success']} successful, {latest['failed']} failed)")
                
                # If all done, exit the loop
                if all_done:
                    break
                    
                # Sleep briefly to avoid hogging CPU
                time.sleep(0.1)
            
            try:
            # Wait for all tasks to complete
                done, not_done = concurrent.futures.wait(
                    future_to_chunk, 
                    timeout=600,  # 10 minute timeout for all chunks
                    return_when=concurrent.futures.ALL_COMPLETED
                )
                
                if not_done:
                    logger.warning(f"{len(not_done)} chunk processing tasks did not complete within the timeout")
                    for future in not_done:
                        chunk_idx = future_to_chunk[future][1]
                        progress_tracker['errors'].append(f"Timeout processing chunk {chunk_idx+1}")
                        progress_tracker['results'][chunk_idx] = f"[Error: Processing timeout for chunk {chunk_idx+1}]"
            except Exception as wait_error:
                logger.error(f"Error waiting for tasks to complete: {str(wait_error)}")
        
        # Collect results in correct order, filtering out None or error entries
        transcriptions = []
        for idx, result in enumerate(progress_tracker['results']):
            if result and not result.startswith("[Error"):
                transcriptions.append(result)
            elif result and result.startswith("[Error"):
                logger.debug(f"Skipping error result from chunk {idx+1}: {result}")
                # Include a placeholder for failed chunks to maintain context
                transcriptions.append(f"[...]")
        
        # Clean up temporary directory
        if temp_dir:
            try:
                shutil.rmtree(temp_dir)
                logger.debug(f"Removed temporary directory: {temp_dir}")
            except Exception as rmdir_error:
                logger.warning(f"Failed to remove temporary directory: {str(rmdir_error)}")
        
        # Combine all transcriptions with proper spacing
        full_transcript = " ".join([t for t in transcriptions if t])
        
        # Log the results
        logger.info(f"Transcription complete: {progress_tracker['success']} successful chunks, {progress_tracker['failed']} failed chunks")
        if progress_tracker['failed'] > 0:
            logger.warning(f"Errors during transcription: {progress_tracker['errors']}")
        
        # Calculate character count for successful transcript
        char_count = len(full_transcript) if full_transcript else 0
        logger.debug(f"Generated transcript with {char_count} characters")
        
        # Clear progress indicators
        progress_text.empty()
        progress_bar.empty()
        
        # Final status message
        if progress_tracker['failed'] > 0:
            if progress_tracker['success'] > 0:
                # Partial success
                overall_status.warning(f"‚ö†Ô∏è Transcription partially complete. Processed {progress_tracker['success']} of {len(chunks)} chunks successfully. {progress_tracker['failed']} chunks had errors.")
                st.success(f"‚úÖ Transcription complete! ({char_count} characters)")
            else:
                # Complete failure
                overall_status.error(f"‚ùå Transcription failed. All {len(chunks)} chunks had errors.")
                if progress_tracker['errors']:
                    st.error(f"Error details: {progress_tracker['errors'][0]}")
        else:
            # Complete success
            overall_status.success(f"‚úÖ Transcription complete! Successfully processed all {len(chunks)} audio segments.")
            st.success(f"‚úÖ Transcription complete! ({char_count} characters)")
        
        return full_transcript
    except Exception as e:
        error_msg = f"Error in large file transcription: {str(e)}"
        logger.error(error_msg, exc_info=True)
        st.error(error_msg)
        return f"Error transcribing audio: {str(e)}"

def transcribe_audio(audio_file):
    """Transcribe an audio file using the appropriate method based on file size"""
    try:
        if audio_file is None:
            logger.warning("No audio file provided for transcription")
            return ""
        
        # Save the uploaded file to a temporary location
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(audio_file.name)[1]) as tmp_file:
            tmp_file.write(audio_file.getbuffer())
            temp_path = tmp_file.name
        
        logger.info(f"Processing audio file: {audio_file.name} (Size: {audio_file.size/1024/1024:.2f} MB)")
        
        try:
            # Check if file is valid audio
            try:
                audio_info = sf.info(temp_path)
                logger.info(f"Audio file details: {audio_file.name}, Duration: {audio_info.duration:.2f}s, "
                           f"Sample rate: {audio_info.samplerate}Hz, Channels: {audio_info.channels}")
                
                # Add file details to the UI
                st.write(f"üìä **File details**: Duration: {audio_info.duration:.2f}s, "
                        f"Sample rate: {audio_info.samplerate}Hz, Channels: {audio_info.channels}")
            except Exception as audio_error:
                logger.warning(f"Could not read audio details: {str(audio_error)}")
                st.warning("‚ö†Ô∏è Could not read detailed audio information from file")
            
            # Determine processing method based on file size
            file_size_mb = os.path.getsize(temp_path) / (1024 * 1024)
            
            # Decision logic for transcription method
            if file_size_mb > 25:  # Large file threshold
                logger.info(f"Large file detected ({file_size_mb:.2f} MB), using chunked processing")
                st.info(f"üîÑ Large audio file detected ({file_size_mb:.2f} MB), processing in chunks for reliability...")
                transcript = transcribe_large_file(temp_path)
            else:
                logger.info(f"Standard file size ({file_size_mb:.2f} MB), using direct transcription")
                st.info(f"üîÑ Processing audio file ({file_size_mb:.2f} MB)...")
                transcript = transcribe_with_whisper(temp_path)
        
            # Clean up the temporary file
            try:
                os.unlink(temp_path)
                logger.debug(f"Removed temporary file: {temp_path}")
            except Exception as cleanup_error:
                logger.warning(f"Failed to remove temporary file: {str(cleanup_error)}")
            
            return transcript
        
        except Exception as process_error:
            # Clean up on error
            try:
                os.unlink(temp_path)
            except:
                pass
            
            # Re-raise for outer exception handler
            raise process_error
        
    except Exception as e:
        error_msg = f"Error processing audio file: {str(e)}"
        logger.error(error_msg, exc_info=True)
        
        # Provide more specific error messages based on error type
        if "ffmpeg" in str(e).lower():
            st.error("‚ùå FFmpeg error. Please ensure FFmpeg is properly installed on your system.")
        elif "memory" in str(e).lower():
            st.error("‚ùå Memory error. File may be too large for processing with current system resources.")
        elif "format" in str(e).lower() or "invalid" in str(e).lower():
            st.error("‚ùå Invalid audio format. Please upload a supported audio file type.")
        elif "api" in str(e).lower() or "key" in str(e).lower():
            st.error("‚ùå API error. Please check your OpenAI API key configuration.")
        else:
            st.error(f"‚ùå Error processing audio: {str(e)}")
        
        return ""

def generate_wisdom(transcript, ai_provider, model, custom_prompt=None, knowledge_base=None):
    """Extract key insights and wisdom from a transcript with streaming output"""
    # Start timing for usage tracking
    start_time = time.time()
    
    # Create a placeholder for streaming output
    stream_container = st.empty()
    stream_content = ""
    
    try:
        prompt = custom_prompt or DEFAULT_PROMPTS["wisdom_extraction"]
        
        # Include knowledge base context if available
        if knowledge_base:
            knowledge_context = "\n\n".join([
                f"## {name}\n{content}" 
                for name, content in knowledge_base.items()
            ])
            system_prompt = f"""Use the following knowledge base to inform your analysis:

{knowledge_context}

When analyzing the content, please incorporate these perspectives and guidelines.

Original Prompt:
{prompt}"""
        else:
            system_prompt = prompt
        
        # Display initial message
        stream_container.markdown("Generating wisdom...")
        
        # Use the selected AI provider and model
        if ai_provider == "OpenAI":
            openai_client = get_openai_client()
            if not openai_client:
                return "Error: OpenAI API key is not configured."
                
            # Stream response from OpenAI
            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{transcript}"}
                ],
                max_tokens=1500,
                stream=True
            )
            
            result = ""
            # Process the streaming response
            for chunk in response:
                if hasattr(chunk.choices[0].delta, "content") and chunk.choices[0].delta.content is not None:
                    content_chunk = chunk.choices[0].delta.content
                    result += content_chunk
                    stream_content += content_chunk
                    # Update the stream display
                    stream_container.markdown(stream_content)
            
        elif ai_provider == "Anthropic":
            anthropic_client = get_anthropic_client()
            if not anthropic_client:
                return "Error: Anthropic API key is not configured."
                
            # Stream response from Anthropic
            with anthropic_client.messages.stream(
                model=model,
                max_tokens=1500,
                system=system_prompt,
                messages=[
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{transcript}"}
                ]
            ) as stream:
                result = ""
                for text in stream.text_stream:
                    result += text
                    stream_content += text
                    # Update the stream display
                    stream_container.markdown(stream_content)
            
        elif ai_provider == "Grok":
            grok_api_key = get_grok_api_key()
            if not grok_api_key:
                return "Error: Grok API key is not configured."

            # Grok doesn't support streaming yet, so we use a progress display
            headers = {
                "Authorization": f"Bearer {grok_api_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": "grok-1",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{transcript}"}
                ]
            }
            
            # Show a progress indicator
            with st.spinner("Generating wisdom with Grok (this may take a moment)..."):
                response = requests.post(
                    "https://api.grok.x.ai/v1/chat/completions",
                    headers=headers,
                    json=payload
                )
                result = response.json()["choices"][0]["message"]["content"]
                # Display the complete result
                stream_container.markdown(result)
        
        # Clear the streaming container when done
        stream_container.empty()
        
        # Update usage tracking
        end_time = time.time()
        duration = end_time - start_time
        update_usage_tracking(duration)
        
        return result
        
    except Exception as e:
        logger.exception("Error in wisdom generation:")
        stream_container.error(f"Error: {str(e)}")
        return f"Error generating wisdom: {str(e)}"

def generate_outline(transcript, wisdom, ai_provider, model, custom_prompt=None, knowledge_base=None):
    """Create a structured outline based on transcript and wisdom with streaming output"""
    # Start timing for usage tracking
    start_time = time.time()
    
    # Create a placeholder for streaming output
    stream_container = st.empty()
    stream_content = ""
    
    try:
        prompt = custom_prompt or DEFAULT_PROMPTS["outline_creation"]
        
        # Include knowledge base context if available
        if knowledge_base:
            knowledge_context = "\n\n".join([
                f"## {name}\n{content}" 
                for name, content in knowledge_base.items()
            ])
            system_prompt = f"""Use the following knowledge base to inform your analysis:

{knowledge_context}

When creating the outline, please incorporate these perspectives and guidelines.

Original Prompt:
{prompt}"""
        else:
            system_prompt = prompt
        
        # Combine transcript and wisdom for better context
        content = f"TRANSCRIPT:\n{transcript}\n\nWISDOM:\n{wisdom}"
        
        # Display initial message
        stream_container.markdown("Creating outline...")
        
        # Use the selected AI provider and model
        if ai_provider == "OpenAI":
            openai_client = get_openai_client()
            if not openai_client:
                return "Error: OpenAI API key is not configured."
                
            # Stream response from OpenAI
            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": content}
                ],
                max_tokens=1500,
                stream=True
            )
            
            result = ""
            # Process the streaming response
            for chunk in response:
                if hasattr(chunk.choices[0].delta, "content") and chunk.choices[0].delta.content is not None:
                    content_chunk = chunk.choices[0].delta.content
                    result += content_chunk
                    stream_content += content_chunk
                    # Update the stream display
                    stream_container.markdown(stream_content)
            
        elif ai_provider == "Anthropic":
            anthropic_client = get_anthropic_client()
            if not anthropic_client:
                return "Error: Anthropic API key is not configured."
                
            # Stream response from Anthropic
            with anthropic_client.messages.stream(
                model=model,
                max_tokens=1500,
                system=system_prompt,
                messages=[
                    {"role": "user", "content": content}
                ]
            ) as stream:
                result = ""
                for text in stream.text_stream:
                    result += text
                    stream_content += text
                    # Update the stream display
                    stream_container.markdown(stream_content)
            
        elif ai_provider == "Grok":
            grok_api_key = get_grok_api_key()
            if not grok_api_key:
                return "Error: Grok API key is not configured."
                
            headers = {
                "Authorization": f"Bearer {grok_api_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": content}
                ]
            }
            
            # Show a progress indicator
            with st.spinner("Creating outline with Grok (this may take a moment)..."):
                response = requests.post(
                    "https://api.grok.x.ai/v1/chat/completions",
                    headers=headers,
                    json=payload
                )
                result = response.json()["choices"][0]["message"]["content"]
                # Display the complete result
                stream_container.markdown(result)
        
        # Clear the streaming container when done
        stream_container.empty()
        
        # Update usage tracking
        end_time = time.time()
        duration = end_time - start_time
        update_usage_tracking(duration)
        
        return result
        
    except Exception as e:
        logger.exception("Error in outline creation:")
        stream_container.error(f"Error: {str(e)}")
        return f"Error creating outline: {str(e)}"

def generate_image_prompts(wisdom, outline, ai_provider, model, custom_prompt=None, knowledge_base=None):
    """Create descriptive image prompts based on wisdom and outline"""
    try:
        prompt = custom_prompt or DEFAULT_PROMPTS["image_prompts"]
        
        # Combine content for context
        content = f"WISDOM:\n{wisdom}\n\nOUTLINE:\n{outline}"
        
        if ai_provider == "OpenAI":
            openai_client = get_openai_client()
            if not openai_client:
                st.error("OpenAI API key is not configured.")
                return None

            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": content}
                ],
                max_tokens=1000
            )
            return response.choices[0].message.content
            
        elif ai_provider == "Anthropic":
            anthropic_client = get_anthropic_client()
            if not anthropic_client:
                st.error("Anthropic API key is not configured.")
                return None

            response = anthropic_client.messages.create(
                model=model,
                max_tokens=1000,
                system=prompt,
                messages=[{"role": "user", "content": content}]
            )
            return response.content[0].text
            
        elif ai_provider == "Grok":
            grok_api_key = get_grok_api_key()
            if not grok_api_key:
                st.error("Grok API key is not configured.")
                return None

            headers = {
                "Authorization": f"Bearer {grok_api_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": content}
                ]
            }
            response = requests.post(
                "https://api.grok.x.ai/v1/chat/completions",
                headers=headers,
                json=payload
            )
            return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        st.error(f"Error generating image prompts with {ai_provider} {model}: {str(e)}")
        return None

def generate_social_content(wisdom, outline, ai_provider, model, custom_prompt=None, knowledge_base=None):
    """Generate social media content based on wisdom and outline"""
    try:
        prompt = custom_prompt or DEFAULT_PROMPTS["social_media"]
        
        # Combine content for context
        content = f"WISDOM:\n{wisdom}\n\nOUTLINE:\n{outline}"
        
        if ai_provider == "OpenAI":
            openai_client = get_openai_client()
            if not openai_client:
                st.error("OpenAI API key is not configured.")
                return None

            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": content}
                ],
                max_tokens=1000
            )
            return response.choices[0].message.content
            
        elif ai_provider == "Anthropic":
            anthropic_client = get_anthropic_client()
            if not anthropic_client:
                st.error("Anthropic API key is not configured.")
                return None

            response = anthropic_client.messages.create(
                model=model,
                max_tokens=1000,
                system=prompt,
                messages=[{"role": "user", "content": content}]
            )
            return response.content[0].text
            
        elif ai_provider == "Grok":
            grok_api_key = get_grok_api_key()
            if not grok_api_key:
                st.error("Grok API key is not configured.")
                return None

            headers = {
                "Authorization": f"Bearer {grok_api_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": content}
                ]
            }
            response = requests.post(
                "https://api.grok.x.ai/v1/chat/completions",
                headers=headers,
                json=payload
            )
            return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        st.error(f"Error generating social media content with {ai_provider} {model}: {str(e)}")
        return None

def generate_article(transcript, wisdom, outline, ai_provider, model, custom_prompt=None, knowledge_base=None):
    """Write a full article based on the outline and content"""
    try:
        prompt = custom_prompt or """Write a comprehensive, engaging article based on the provided outline and wisdom.
        Include an introduction, developed sections following the outline, and a conclusion.
        Maintain a conversational yet authoritative tone."""
        
        # Combine all content for context
        content = f"TRANSCRIPT EXCERPT:\n{transcript[:1000]}...\n\nWISDOM:\n{wisdom}\n\nOUTLINE:\n{outline}"
        
        if ai_provider == "OpenAI":
            openai_client = get_openai_client()
            if not openai_client:
                st.error("OpenAI API key is not configured.")
                return None

            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": content}
                ],
                max_tokens=2500
            )
            return response.choices[0].message.content
            
        elif ai_provider == "Anthropic":
            anthropic_client = get_anthropic_client()
            if not anthropic_client:
                st.error("Anthropic API key is not configured.")
                return None

            response = anthropic_client.messages.create(
                model=model,
                max_tokens=2500,
                system=prompt,
                messages=[{"role": "user", "content": content}]
            )
            return response.content[0].text
            
        elif ai_provider == "Grok":
            grok_api_key = get_grok_api_key()
            if not grok_api_key:
                st.error("Grok API key is not configured.")
                return None

            headers = {
                "Authorization": f"Bearer {grok_api_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": content}
                ]
            }
            response = requests.post(
                "https://api.grok.x.ai/v1/chat/completions",
                headers=headers,
                json=payload
            )
            return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        st.error(f"Error writing article with {ai_provider} {model}: {str(e)}")
        return None

def generate_seo_metadata(content, title):
    """Generate SEO metadata for the content"""
    try:
        openai_client = get_openai_client()
        if not openai_client:
            st.error("OpenAI API key is not configured.")
            return None

        prompt = f"""As an SEO expert, analyze this content and generate essential SEO metadata:

        Content Title: {title}
        Content Preview: {content[:1000]}...

        Please provide:
        1. SEO-optimized title (50-60 chars)
        2. Meta description (150-160 chars)
        3. Primary keyword
        4. 3-4 secondary keywords
        5. Recommended URL slug
        6. Schema type recommendation

        Format as JSON."""

        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an SEO expert that provides metadata in JSON format."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.3
        )
        
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Error generating SEO metadata: {str(e)}")
        return None

def process_all_content(text, ai_provider, model, knowledge_base=None):
    """Process all content stages at once with detailed streaming progress"""
    try:
        results = {
            'wisdom': None,
            'outline': None,
            'social_posts': None,
            'image_prompts': None,
            'article': None
        }
        
        # Main progress container
        progress_container = st.empty()
        progress_container.markdown("### Content Generation Progress")
        
        # Sequential processing with progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        content_preview = st.empty()
        
        # Generate wisdom
        status_text.text("Step 1/5: Extracting wisdom...")
        with st.status("Extracting key insights from your content...") as status:
            results['wisdom'] = generate_wisdom(text, ai_provider, model, knowledge_base=knowledge_base)
            if results['wisdom']:
                progress_bar.progress(0.2)
                status.update(label="‚úÖ Wisdom extracted successfully!", state="complete")
                content_preview.markdown(f"**Wisdom Preview:**\n{results['wisdom'][:300]}...")
            else:
                status.update(label="‚ùå Wisdom extraction failed.", state="error")
        
        # Generate outline
        status_text.text("Step 2/5: Creating outline...")
        with st.status("Organizing content into a structured outline...") as status:
            results['outline'] = generate_outline(text, results['wisdom'], ai_provider, model, knowledge_base=knowledge_base)
            if results['outline']:
                progress_bar.progress(0.4)
                status.update(label="‚úÖ Outline created successfully!", state="complete")
                content_preview.markdown(f"**Outline Preview:**\n{results['outline'][:300]}...")
            else:
                status.update(label="‚ùå Outline creation failed.", state="error")
        
        # Generate social content
        status_text.text("Step 3/5: Generating social media content...")
        with st.status("Creating social media posts from your content...") as status:
            results['social_posts'] = generate_social_content(results['wisdom'], results['outline'], ai_provider, model, knowledge_base=knowledge_base)
            if results['social_posts']:
                progress_bar.progress(0.6)
                status.update(label="‚úÖ Social media content generated!", state="complete")
                content_preview.markdown(f"**Social Posts Preview:**\n{results['social_posts'][:300]}...")
            else:
                status.update(label="‚ùå Social content generation failed.", state="error")
        
        # Generate image prompts
        status_text.text("Step 4/5: Creating image prompts...")
        with st.status("Generating image description prompts...") as status:
            results['image_prompts'] = generate_image_prompts(results['wisdom'], results['outline'], ai_provider, model, knowledge_base=knowledge_base)
            if results['image_prompts']:
                progress_bar.progress(0.8)
                status.update(label="‚úÖ Image prompts created successfully!", state="complete")
                content_preview.markdown(f"**Image Prompts Preview:**\n{results['image_prompts'][:300]}...")
            else:
                status.update(label="‚ùå Image prompt creation failed.", state="error")
        
        # Generate article
        status_text.text("Step 5/5: Writing full article...")
        with st.status("Writing a complete article from your content...") as status:
            results['article'] = generate_article(text, results['wisdom'], results['outline'], ai_provider, model, knowledge_base=knowledge_base)
            if results['article']:
                progress_bar.progress(1.0)
                status.update(label="‚úÖ Article written successfully!", state="complete")
                content_preview.markdown(f"**Article Preview:**\n{results['article'][:300]}...")
            else:
                status.update(label="‚ùå Article generation failed.", state="error")
        
        status_text.text("üéâ Content generation complete!")
        progress_container.markdown("### ‚úÖ All content generated successfully!")
        content_preview.empty()
        
        return results
        
    except Exception as e:
        logger.exception("Error in batch processing:")
        st.error(f"Error in batch processing: {str(e)}")
        return None

def main():
    """Main function to run the Streamlit app"""
    
    # Import custom prompts on startup if available
    if not os.path.exists("prompts"):
        os.makedirs("prompts")
        for prompt_type in DEFAULT_PROMPTS.keys():
            with open(f"prompts/{prompt_type}.md", "w") as f:
                f.write(DEFAULT_PROMPTS[prompt_type])
    
    # Initialize session state variables
    if 'transcription' not in st.session_state:
        st.session_state.transcription = ""
    if 'wisdom' not in st.session_state:
        st.session_state.wisdom = ""
    if 'outline' not in st.session_state:
        st.session_state.outline = ""
    if 'social_posts' not in st.session_state:
        st.session_state.social_posts = ""
    if 'image_prompts' not in st.session_state:
        st.session_state.image_prompts = ""
    if 'article' not in st.session_state:
        st.session_state.article = ""
    if 'current_tab' not in st.session_state:
        st.session_state.current_tab = "Audio Processing"
    
    # Set app title and layout
    st.title("WhisperForge")
    st.markdown("Transform spoken ideas into comprehensive content with AI assistance.")
    
    # Set up sidebar
    with st.sidebar:
        # User profiles section
        st.header("User Profile")
        
        # Get available users
        users, _ = load_prompts()
        
        # Select user profile
        if 'user_profile_sidebar' not in st.session_state:
            st.session_state.user_profile_sidebar = users[0] if users else "default_user"
            
        selected_user = st.selectbox(
            "Select User Profile",
            options=users,
            index=users.index(st.session_state.user_profile_sidebar) if st.session_state.user_profile_sidebar in users else 0,
            key="user_profile_select"
        )
        
        # Update user profile when changed
        if selected_user != st.session_state.user_profile_sidebar:
            st.session_state.user_profile_sidebar = selected_user
            
        # Load knowledge base for selected user
        knowledge_base = load_user_knowledge_base(selected_user)
        
        # Add separator
        st.markdown("---")
        
        # API settings
        st.header("API Settings")
        
        # Authentication section
        if not is_authenticated():
            # Show login or register options
            auth_action = st.radio("Authentication", ["Login", "Register"])
            
            if auth_action == "Login":
                show_login_form()
            else:
                show_registration_form()
        else:
            # Show logout and API key management
            st.write(f"Logged in as: {get_user_email()}")
            
            if st.button("Logout"):
                logout_user()
                st.experimental_rerun()
            
            # Collapsible API keys section
            with st.expander("API Keys"):
                manage_api_keys()
        
        # Admin link
        if is_authenticated() and is_admin(get_current_user_id()):
            st.markdown("---")
            if st.button("Admin Dashboard"):
                st.session_state.page = "admin"
                st.experimental_rerun()
    
    # Main navigation using radio buttons for more predictable state behavior
    tab_names = ["Audio Processing", "Generated Content", "Prompts", "Settings"]
    
    selected_tab = st.radio(
        "Navigation",
        tab_names,
        index=tab_names.index(st.session_state.current_tab) if st.session_state.current_tab in tab_names else 0,
        horizontal=True,
        label_visibility="collapsed"
    )
    
    # Update current tab in session state when changed
    if selected_tab != st.session_state.current_tab:
        st.session_state.current_tab = selected_tab
        st.experimental_rerun()
    
    # Display content based on selected tab
    if st.session_state.current_tab == "Audio Processing":
        # Audio Processing Tab
        st.header("Audio Upload")
        
        uploaded_file = st.file_uploader("Upload audio file", type=["mp3", "wav", "ogg", "m4a"], 
                                         help="Supported formats: MP3, WAV, OGG, M4A")
        
        custom_title = st.text_input("Custom Title (optional)", 
                                     help="Enter a custom title for your content, or leave blank to auto-generate one")
        
        # Process audio when button is clicked
        if uploaded_file is not None and st.button("Transcribe Audio"):
            # Check API keys
            openai_client = get_openai_client()
            if not openai_client:
                st.error("OpenAI API key is not configured. Please add your API key in the settings.")
            else:
                # Process and transcribe the audio
                with st.spinner("Processing audio file..."):
                    # Create unique temp file for the audio
                    temp_audio_file = create_temp_audio_file(uploaded_file)
                    
                    try:
                        # Get audio duration
                        audio_info = get_audio_info(temp_audio_file)
                        duration_mins = audio_info["duration"] / 60
                        
                        # Update user usage quota
                        if is_authenticated():
                            user_id = get_current_user_id()
                            update_usage_quota(user_id, duration_mins)
                            
                        # Check for large files
                        if audio_info["duration"] > 600:  # 10 minutes threshold
                            # Use chunked processing for large files
                            st.session_state.transcription = transcribe_large_file(temp_audio_file)
                        else:
                            # Direct transcription for small files
                            audio_file = open(temp_audio_file, "rb")
                            response = openai_client.audio.transcriptions.create(
                                model="whisper-1",
                                file=audio_file
                            )
                            audio_file.close()
                            st.session_state.transcription = response.text
                        
                        # Show success
                        st.success("Audio transcription complete!")
                        
                        # Auto-generate title if needed
                        if not custom_title:
                            with st.spinner("Generating title..."):
                                custom_title = generate_title(st.session_state.transcription)
                        
                        # Save the title
                        st.session_state.title = custom_title
                        
                        # Clear other generated content when new audio is processed
                        st.session_state.wisdom = ""
                        st.session_state.outline = ""
                        st.session_state.social_posts = ""
                        st.session_state.image_prompts = ""
                        st.session_state.article = ""
                        
                    except Exception as e:
                        st.error(f"Error processing audio: {str(e)}")
                    finally:
                        # Clean up temp file
                        if os.path.exists(temp_audio_file):
                            os.remove(temp_audio_file)
        
        # Display transcription if available
        if st.session_state.transcription:
            st.header("Transcription")
            
            # Show title if available
            if hasattr(st.session_state, 'title') and st.session_state.title:
                st.subheader(st.session_state.title)
            
            # Display transcription
            st.markdown(f"""
            <div style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 20px;">
                {st.session_state.transcription}
            </div>
            """, unsafe_allow_html=True)
            
            # Select model for content generation
            st.header("AI Model Selection")
            
            ai_provider = st.selectbox(
                "Select AI Provider",
                options=["OpenAI", "Anthropic", "Grok"],
                key="ai_provider"
            )
            
            # Get available models for selected provider
            available_models = get_available_models(ai_provider)
            
            # Select specific model
            model = st.selectbox(
                "Select Model",
                options=available_models,
                key="ai_model"
            )
            
            # Content generation options
            st.header("Generate Content")
            
            # Create expanders for different content types
            with st.expander("Extract Wisdom"):
                if st.button("Extract Key Insights") or st.session_state.wisdom:
                    if not st.session_state.wisdom:
                        with st.spinner("Extracting wisdom..."):
                            # Get custom prompt if available
                            custom_prompt = get_prompt(selected_user, "wisdom_extraction")
                            st.session_state.wisdom = extract_wisdom(
                                st.session_state.transcription, 
                                ai_provider, 
                                model,
                                custom_prompt,
                                knowledge_base
                            )
                    
                    st.markdown(st.session_state.wisdom)
            
            with st.expander("Create Outline"):
                if st.button("Generate Article Outline") or st.session_state.outline:
                    if not st.session_state.outline:
                        with st.spinner("Creating outline..."):
                            custom_prompt = get_prompt(selected_user, "outline_creation")
                            st.session_state.outline = create_outline(
                                st.session_state.transcription, 
                                st.session_state.wisdom if st.session_state.wisdom else None,
                                ai_provider, 
                                model,
                                custom_prompt,
                                knowledge_base
                            )
                    
                    st.markdown(st.session_state.outline)
            
            with st.expander("Generate Social Media"):
                if st.button("Create Social Posts") or st.session_state.social_posts:
                    if not st.session_state.social_posts:
                        with st.spinner("Generating social posts..."):
                            custom_prompt = get_prompt(selected_user, "social_media")
                            st.session_state.social_posts = generate_social_posts(
                                st.session_state.transcription,
                                st.session_state.wisdom if st.session_state.wisdom else None,
                                ai_provider,
                                model,
                                custom_prompt,
                                knowledge_base
                            )
                    
                    st.markdown(st.session_state.social_posts)
            
            with st.expander("Generate Image Prompts"):
                if st.button("Create Image Prompts") or st.session_state.image_prompts:
                    if not st.session_state.image_prompts:
                        with st.spinner("Generating image prompts..."):
                            custom_prompt = get_prompt(selected_user, "image_prompts")
                            st.session_state.image_prompts = generate_image_prompts(
                                st.session_state.wisdom if st.session_state.wisdom else st.session_state.transcription,
                                st.session_state.outline if st.session_state.outline else None,
                                ai_provider,
                                model,
                                custom_prompt,
                                knowledge_base
                            )
                    
                    st.markdown(st.session_state.image_prompts)
            
            with st.expander("Write Full Article"):
                if st.button("Draft Complete Article") or st.session_state.article:
                    if not st.session_state.article:
                        with st.spinner("Writing article... this may take a few minutes"):
                            # Use outline if available, otherwise generate from transcription
                            outline = st.session_state.outline if st.session_state.outline else create_outline(
                                st.session_state.transcription,
                                st.session_state.wisdom if st.session_state.wisdom else None,
                                ai_provider,
                                model,
                                get_prompt(selected_user, "outline_creation"),
                                knowledge_base
                            )
                            
                            st.session_state.article = write_article(
                                st.session_state.transcription,
                                outline,
                                ai_provider,
                                model,
                                knowledge_base
                            )
                    
                    st.markdown(st.session_state.article)
            
            # Save to Notion section
            st.header("Export to Notion")
            
            if st.button("Save to Notion"):
                with st.spinner("Exporting to Notion..."):
                    # Check Notion API key and database ID
                    notion_client = get_notion_client()
                    notion_database_id = get_notion_database_id()
                    
                    if not notion_client or not notion_database_id:
                        st.error("Notion API key or database ID is not configured. Please add them in the settings.")
                    else:
                        try:
                            # Prepare content for Notion
                            title = st.session_state.title if hasattr(st.session_state, 'title') and st.session_state.title else f"Whisper: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
                            
                            # Extract tags from wisdom if available
                            tags = extract_tags(st.session_state.wisdom) if st.session_state.wisdom else []
                            
                            # Create Notion page
                            page_url = create_notion_page(
                                notion_client,
                                notion_database_id,
                                title,
                                st.session_state.transcription,
                                st.session_state.wisdom if st.session_state.wisdom else None,
                                st.session_state.outline if st.session_state.outline else None,
                                st.session_state.social_posts if st.session_state.social_posts else None,
                                st.session_state.image_prompts if st.session_state.image_prompts else None,
                                st.session_state.article if st.session_state.article else None,
                                tags,
                                uploaded_file.name if uploaded_file else None
                            )
                            
                            st.success(f"Content saved to Notion! [Open Page]({page_url})")
                        except Exception as e:
                            st.error(f"Error saving to Notion: {str(e)}")
                            
    elif st.session_state.current_tab == "Generated Content":
        # Generated Content Tab
        st.header("Generated Content")
        
        if st.session_state.get("transcription"):
            # Title
            if hasattr(st.session_state, 'title') and st.session_state.title:
                st.subheader(st.session_state.title)
            
            # Create tabs for different content types
            content_tabs = st.tabs(["Transcription", "Wisdom", "Outline", "Social Media", "Image Prompts", "Article"])
            
            with content_tabs[0]:
                st.markdown(st.session_state.transcription)
            
            with content_tabs[1]:
                if st.session_state.wisdom:
                    st.markdown(st.session_state.wisdom)
                else:
                    st.info("No wisdom extracted yet. Go to the Audio Processing tab to extract wisdom.")
            
            with content_tabs[2]:
                if st.session_state.outline:
                    st.markdown(st.session_state.outline)
                else:
                    st.info("No outline created yet. Go to the Audio Processing tab to create an outline.")
            
            with content_tabs[3]:
                if st.session_state.social_posts:
                    st.markdown(st.session_state.social_posts)
                else:
                    st.info("No social posts generated yet. Go to the Audio Processing tab to generate social posts.")
            
            with content_tabs[4]:
                if st.session_state.image_prompts:
                    st.markdown(st.session_state.image_prompts)
                else:
                    st.info("No image prompts generated yet. Go to the Audio Processing tab to generate image prompts.")
            
            with content_tabs[5]:
                if st.session_state.article:
                    st.markdown(st.session_state.article)
                else:
                    st.info("No article written yet. Go to the Audio Processing tab to write an article.")
        else:
            st.info("Process audio first to see generated content.")
            
    elif st.session_state.current_tab == "Prompts":
        # Prompt Management Tab
        st.header("Prompt Management")
        st.write("Customize prompts for different content generation tasks.")
        
        # Get available users
        users = get_available_users()
        
        # Select user profile
        selected_user = st.selectbox(
            "Select Profile", 
            options=users, 
            index=users.index(st.session_state.get("user_profile_sidebar", users[0])) if st.session_state.get("user_profile_sidebar", users[0]) in users else 0,
            key="prompts_user_select"
        )
        
        # Configure prompts for selected user
        configure_prompts(selected_user)
        
        # Add prompt template help
        with st.expander("Prompt Template Help"):
            st.markdown("""
            ### Prompt Template Variables
            
            Your prompt templates can include the following variables which will be replaced with actual content:
            
            - `{transcript}` - The full transcript text
            - `{knowledge_base}` - Any knowledge base context that's relevant
            
            ### Prompt Template Format
            
            For best results, structure your prompts as follows:
            
            ```
            ## Instructions
            Instructions for the AI on how to approach the task.
            
            ## Context
            Any contextual information about your style, preferences, or requirements.
            
            ## Prompt
            The actual prompt that will be sent to the AI.
            ```
            
            Only the section after "## Prompt" is required, but adding instructions and context helps organize your templates.
            """)
            
    elif st.session_state.current_tab == "Settings":
        # Settings Tab
        show_user_config_page()
    
    # Check for admin dashboard navigation
    if st.session_state.get("page") == "admin":
        show_admin_page()
        st.session_state.page = "main"

def show_main_page():
    # This function contains the original main app functionality
    
    # Get user's API keys
    api_keys = get_user_api_keys()
    
    # Check if API keys are set up
    openai_key = api_keys.get("openai")
    anthropic_key = api_keys.get("anthropic")
    notion_key = api_keys.get("notion")
    
    if not openai_key:
        st.warning("‚ö†Ô∏è Your OpenAI API key is not set up. Some features may not work properly. [Set up your API keys](?page=api)")
    
    if not anthropic_key:
        st.warning("‚ö†Ô∏è Your Anthropic API key is not set up. Some features may not work properly. [Set up your API keys](?page=api)")
    
    # Get selected user from the sidebar
    selected_user = st.session_state.get("user_profile_sidebar", "Default")
    
    # Load knowledge base for selected user
    knowledge_base = load_user_knowledge_base(selected_user)
    
    # Display the current models being used
    st.info(f"Using {st.session_state.transcription_provider} {st.session_state.transcription_model} for transcription and {st.session_state.ai_provider} {st.session_state.ai_model} for content processing. Model settings can be changed in the Admin panel.")
    
    # Add tabs for input selection
    input_tabs = st.tabs(["Audio Upload", "Text Input"])
    
    # Tab 1: Audio Upload
    with input_tabs[0]:
        st.markdown('<div class="section-header">Audio Transcription</div>', unsafe_allow_html=True)
        
        # Update the file uploader with clear message about 500MB limit
        uploaded_file = st.file_uploader(
            "Upload your audio file", 
            type=['mp3', 'wav', 'ogg', 'm4a'],
            key="audio_uploader",
            help="Files up to 500MB are supported. Large files will be automatically chunked for parallel processing."
        )
        
        # Transcribe Button
        if uploaded_file is not None:
            if st.button("üéôÔ∏è Transcribe Audio", key="transcribe_button", use_container_width=True):
                with st.spinner("Transcribing your audio..."):
                    transcription = transcribe_audio(uploaded_file)
                    if transcription:
                        st.session_state.transcription = transcription
                        st.session_state.audio_file = uploaded_file
        
        # Display transcription result if available
        if st.session_state.transcription:
            st.markdown("### Transcription Result")
            st.text_area("Transcript", st.session_state.transcription, height=200, key="transcript_display")
            
            # Content generation section
            st.markdown('<div class="section-header">Content Generation</div>', unsafe_allow_html=True)
            
            # Show content generation options
            content_tabs = st.tabs(["Step-by-Step", "All-in-One", "Custom"])
            
            with content_tabs[0]:
                # Wisdom extraction
                wisdom_expander = st.expander("üìù Extract Wisdom", expanded=True)
                with wisdom_expander:
                    if st.button("Generate Wisdom", key="wisdom_button", use_container_width=True):
                        with st.spinner("Extracting key insights..."):
                            wisdom = generate_wisdom(
                                st.session_state.transcription, 
                                st.session_state.ai_provider,
                                st.session_state.ai_model,
                                knowledge_base=knowledge_base
                            )
                            if wisdom:
                                st.session_state.wisdom = wisdom
                    
                    if st.session_state.get("wisdom"):
                        st.markdown("### Extracted Wisdom")
                        st.markdown(st.session_state.wisdom)
                
                # Outline creation
                outline_expander = st.expander("üìã Create Outline", expanded=False)
                with outline_expander:
                    if st.button("Generate Outline", key="outline_button", use_container_width=True):
                        if not st.session_state.get("wisdom"):
                            st.warning("Please extract wisdom first.")
                        else:
                            with st.spinner("Creating outline..."):
                                outline = generate_outline(
                                    st.session_state.transcription,
                                    st.session_state.wisdom,
                                    st.session_state.ai_provider,
                                    st.session_state.ai_model,
                                    knowledge_base=knowledge_base
                                )
                                if outline:
                                    st.session_state.outline = outline
                    
                    if st.session_state.get("outline"):
                        st.markdown("### Content Outline")
                        st.markdown(st.session_state.outline)
                
                # Social media content
                social_expander = st.expander("üì± Social Media Content", expanded=False)
                with social_expander:
                    if st.button("Generate Social Posts", key="social_button", use_container_width=True):
                        if not st.session_state.get("wisdom") or not st.session_state.get("outline"):
                            st.warning("Please extract wisdom and create an outline first.")
                        else:
                            with st.spinner("Creating social media content..."):
                                social = generate_social_content(
                                    st.session_state.wisdom,
                                    st.session_state.outline,
                                    st.session_state.ai_provider,
                                    st.session_state.ai_model,
                                    knowledge_base=knowledge_base
                                )
                                if social:
                                    st.session_state.social = social
                    
                    if st.session_state.get("social"):
                        st.markdown("### Social Media Content")
                        st.markdown(st.session_state.social)
                
                # Image prompts
                image_expander = st.expander("üñºÔ∏è Image Prompts", expanded=False)
                with image_expander:
                    if st.button("Generate Image Prompts", key="image_button", use_container_width=True):
                        if not st.session_state.get("wisdom") or not st.session_state.get("outline"):
                            st.warning("Please extract wisdom and create an outline first.")
                        else:
                            with st.spinner("Creating image prompts..."):
                                prompts = generate_image_prompts(
                                    st.session_state.wisdom,
                                    st.session_state.outline,
                                    st.session_state.ai_provider,
                                    st.session_state.ai_model,
                                    knowledge_base=knowledge_base
                                )
                                if prompts:
                                    st.session_state.image_prompts = prompts
                    
                    if st.session_state.get("image_prompts"):
                        st.markdown("### Image Prompts")
                        st.markdown(st.session_state.image_prompts)
                
                # Full article
                article_expander = st.expander("üìÑ Full Article", expanded=False)
                with article_expander:
                    if st.button("Generate Article", key="article_button", use_container_width=True):
                        if not st.session_state.get("wisdom") or not st.session_state.get("outline"):
                            st.warning("Please extract wisdom and create an outline first.")
                        else:
                            with st.spinner("Writing full article..."):
                                article = generate_article(
                                    st.session_state.transcription,
                                    st.session_state.wisdom,
                                    st.session_state.outline,
                                    st.session_state.ai_provider,
                                    st.session_state.ai_model,
                                    knowledge_base=knowledge_base
                                )
                                if article:
                                    st.session_state.article = article
                    
                    if st.session_state.get("article"):
                        st.markdown("### Generated Article")
                        st.markdown(st.session_state.article)
            
            with content_tabs[1]:
                # All-in-one generation
                if st.button("üöÄ Generate All Content", key="generate_all", use_container_width=True):
                    with st.spinner("Processing all content..."):
                        results = process_all_content(
                            st.session_state.transcription,
                            st.session_state.ai_provider,
                            st.session_state.ai_model,
                            knowledge_base=knowledge_base
                        )
                        if results:
                            st.session_state.wisdom = results.get('wisdom', '')
                            st.session_state.outline = results.get('outline', '')
                            st.session_state.social = results.get('social_posts', '')
                            st.session_state.image_prompts = results.get('image_prompts', '')
                            st.session_state.article = results.get('article', '')
                            st.success("‚úÖ All content generated successfully!")
            
            with content_tabs[2]:
                # Custom prompt generation
                st.markdown("### Custom Prompt")
                custom_prompt = st.text_area(
                    "Enter your custom prompt",
                    placeholder="Ask anything about the transcription...",
                    height=100
                )
                
                if st.button("Send Custom Prompt", key="custom_prompt_button", use_container_width=True):
                    if custom_prompt:
                        with st.spinner("Processing custom prompt..."):
                            result = apply_prompt(
                                st.session_state.transcription, 
                                custom_prompt,
                                st.session_state.ai_provider,
                                st.session_state.ai_model,
                                user_knowledge=knowledge_base
                            )
                            if result:
                                st.markdown("### Result")
                                st.markdown(result)
            
            # Notion export
            st.markdown('<div class="section-header">Export to Notion</div>', unsafe_allow_html=True)
            
            # Check if Notion API key is configured
            notion_key = api_keys.get("notion") or os.getenv("NOTION_API_KEY")
            notion_db = api_keys.get("notion_database_id") or os.getenv("NOTION_DATABASE_ID")
            
            if not notion_key or not notion_db:
                st.warning("‚ö†Ô∏è Notion integration is not configured. Please set up your Notion API key and database ID in Settings.")
            else:
                title = st.session_state.content_title_value or "Untitled Content"
                
                if st.button("üíæ Save to Notion", key="notion_save", use_container_width=True):
                    with st.spinner("Saving to Notion..."):
                        try:
                            # Always generate an AI title for better results
                            if st.session_state.transcription:
                                with st.status("Generating a descriptive title...") as status:
                                    title_to_use = generate_short_title(st.session_state.transcription)
                                    status.update(label=f"Title generated: \"{title_to_use}\"", state="complete")
                            else:
                                title_to_use = "WhisperForge Content"
                            
                            with st.status("Saving to Notion...") as status:
                                result = create_content_notion_entry(
                                    title_to_use,
                                    st.session_state.transcription,
                                    wisdom=st.session_state.get("wisdom"),
                                    outline=st.session_state.get("outline"),
                                    social_content=st.session_state.get("social"),
                                    image_prompts=st.session_state.get("image_prompts"),
                                    article=st.session_state.get("article")
                                )
                                
                                if result:
                                    status.update(label="Successfully saved to Notion!", state="complete")
                                else:
                                    status.update(label="Failed to save to Notion", state="error")
                        except Exception as e:
                            logger.exception("Error saving to Notion:")
                            st.error(f"Error saving to Notion: {str(e)}")
    
    # Tab 2: Text Input
    with input_tabs[1]:
        st.markdown('<div class="section-header">Manual Text Input</div>', unsafe_allow_html=True)
        
        text_input = st.text_area(
            "Enter your text",
            placeholder="Paste your transcript or any text to process...",
            height=300,
            key="manual_text"
        )
        
        if st.button("Use This Text", key="use_text_button", use_container_width=True):
            if text_input:
                st.session_state.transcription = text_input
                st.success("Text loaded for processing!")
                st.rerun()

def show_api_keys_page():
    st.markdown("## API Keys Management")
    st.markdown("Set up your API keys to use with WhisperForge. Your keys are encrypted and stored securely.")
    
    # Get current API keys
    api_keys = get_user_api_keys()
    
    # OpenAI API Key
    st.markdown("### OpenAI API Key")
    st.markdown("Required for audio transcription and most AI capabilities.")
    
    # Create a masked display of the current key if it exists
    openai_key = api_keys.get("openai", "")
    openai_key_display = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢{openai_key[-4:]}" if openai_key else "Not set"
    
    st.markdown(f"**Current key:** {openai_key_display}")
    
    # Input for new key
    new_openai_key = st.text_input("Enter new OpenAI API key", type="password", key="new_openai_key")
    if st.button("Save OpenAI Key"):
        if new_openai_key:
            update_api_key("openai", new_openai_key)
            st.success("OpenAI API key updated successfully!")
            time.sleep(1)
            st.rerun()
    
    st.markdown("---")
    
    # Anthropic API Key
    st.markdown("### Anthropic API Key")
    st.markdown("Optional: Used for Claude AI models.")
    
    anthropic_key = api_keys.get("anthropic", "")
    anthropic_key_display = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢{anthropic_key[-4:]}" if anthropic_key else "Not set"
    
    st.markdown(f"**Current key:** {anthropic_key_display}")
    
    new_anthropic_key = st.text_input("Enter new Anthropic API key", type="password", key="new_anthropic_key")
    if st.button("Save Anthropic Key"):
        update_api_key("anthropic", new_anthropic_key)
        st.success("Anthropic API key updated successfully!")
        time.sleep(1)
        st.rerun()
    
    st.markdown("---")
    
    # Notion API Key
    st.markdown("### Notion API Key")
    st.markdown("Optional: Used for exporting content to Notion.")
    
    notion_key = api_keys.get("notion", "")
    notion_key_display = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢{notion_key[-4:]}" if notion_key else "Not set"
    
    st.markdown(f"**Current key:** {notion_key_display}")
    
    col1, col2 = st.columns(2)
    with col1:
        new_notion_key = st.text_input("Enter new Notion API key", type="password", key="new_notion_key")
    with col2:
        notion_database_id = st.text_input("Notion Database ID", value=api_keys.get("notion_database_id", ""), key="notion_database_id")
    
    if st.button("Save Notion Settings"):
        update_api_key("notion", new_notion_key)
        update_api_key("notion_database_id", notion_database_id)
        st.success("Notion settings updated successfully!")
        time.sleep(1)
        st.rerun()
    
    st.markdown("---")
    
    # Grok API Key
    st.markdown("### Grok API Key (Experimental)")
    st.markdown("Optional: Used for Grok AI models.")
    
    grok_key = api_keys.get("grok", "")
    grok_key_display = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢{grok_key[-4:]}" if grok_key else "Not set"
    
    st.markdown(f"**Current key:** {grok_key_display}")
    
    new_grok_key = st.text_input("Enter new Grok API key", type="password", key="new_grok_key")
    if st.button("Save Grok Key"):
        update_api_key("grok", new_grok_key)
        st.success("Grok API key updated successfully!")
        time.sleep(1)
        st.rerun()

def show_usage_page():
    st.markdown("## Usage Statistics")
    
    # Get user info
    conn = get_db_connection()
    user = conn.execute(
        "SELECT email, subscription_tier, usage_quota, usage_current, created_at FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()
    conn.close()
    
    if not user:
        st.error("Error retrieving user data")
        return
    
    # User info section
    st.markdown("### Account Information")
    st.write(f"**Email:** {user['email']}")
    st.write(f"**Account created:** {user['created_at']}")
    st.write(f"**Subscription tier:** {user['subscription_tier'].title()}")
    
    # Usage statistics
    st.markdown("### Current Usage")
    
    # Calculate percentage
    usage_percent = min(100, (user['usage_current'] / user['usage_quota']) * 100) if user['usage_quota'] > 0 else 0
    
    # Show progress bar
    st.progress(usage_percent / 100)
    st.write(f"**Usage this month:** {user['usage_current']} / {user['usage_quota']} minutes ({usage_percent:.1f}%)")
    
    # Upgrade options
    st.markdown("### Upgrade Your Plan")
    st.markdown("""
    | Plan | Monthly Price | Minutes/Month | Features |
    |------|---------------|---------------|----------|
    | Free | $0 | 60 | Basic transcription |
    | Basic | $9.99 | 300 | + Claude AI models |
    | Pro | $19.99 | 1,000 | + Advanced processing |
    | Enterprise | Contact us | Custom | Custom integrations |
    """)
    
    if user['subscription_tier'] != 'enterprise':
        if st.button("Upgrade Now"):
            st.info("This would redirect to a payment page in the production version.")
    
    # Reset usage manually (for testing)
    if st.button("Reset Usage Counter"):
        conn = get_db_connection()
        conn.execute(
            "UPDATE users SET usage_current = 0 WHERE id = ?",
            (st.session_state.user_id,)
        )
        conn.commit()
        conn.close()
        st.success("Usage counter reset to 0")
        time.sleep(1)
        st.rerun()

def update_api_key(key_name, key_value):
    if not st.session_state.authenticated:
        return False
    
    conn = get_db_connection()
    
    # Get current api_keys JSON
    user = conn.execute(
        "SELECT api_keys FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()
    
    if not user:
        conn.close()
        return False
    
    # Update the specific key
    api_keys = json.loads(user['api_keys']) if user['api_keys'] else {}
    
    # If key value is empty, remove the key
    if key_value:
        api_keys[key_name] = key_value
    else:
        api_keys.pop(key_name, None)
    
    # Save back to the database
    conn.execute(
        "UPDATE users SET api_keys = ? WHERE id = ?",
        (json.dumps(api_keys), st.session_state.user_id)
    )
    conn.commit()
    conn.close()
    return True
    
def get_api_key_for_service(service_name):
    """Get the API key for a specific service from the user's stored keys"""
    # Prioritize environment variables for testing
    if service_name == "openai":
        env_key = os.getenv("OPENAI_API_KEY")
        if env_key:
            return env_key
    elif service_name == "anthropic":
        env_key = os.getenv("ANTHROPIC_API_KEY")
        if env_key:
            return env_key
    elif service_name == "notion":
        env_key = os.getenv("NOTION_API_KEY")
        if env_key:
            return env_key
    elif service_name == "grok":
        env_key = os.getenv("GROK_API_KEY")
        if env_key:
            return env_key
    
    if not st.session_state.authenticated:
        # Fallback to environment variables
        if service_name == "openai":
            return os.getenv("OPENAI_API_KEY")
        elif service_name == "anthropic":
            return os.getenv("ANTHROPIC_API_KEY")
        elif service_name == "notion":
            return os.getenv("NOTION_API_KEY")
        elif service_name == "grok":
            return os.getenv("GROK_API_KEY")
        return None
    
    # Get from user's stored keys
    api_keys = get_user_api_keys()
    key = api_keys.get(service_name)
    
    # Fallback to environment if user doesn't have a key
    if not key:
        if service_name == "openai":
            return os.getenv("OPENAI_API_KEY")
        elif service_name == "anthropic":
            return os.getenv("ANTHROPIC_API_KEY")
        elif service_name == "notion":
            return os.getenv("NOTION_API_KEY")
        elif service_name == "grok":
            return os.getenv("GROK_API_KEY")
    
    return key

# Authentication UI
def show_login_page():
    st.markdown(f"""
    <div class="header-container">
        <div class="header-title">WhisperForge // Authentication</div>
        <div class="header-date">{datetime.now().strftime('%a %d %b %Y ¬∑ %H:%M')}</div>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["Login", "Register"])
    
    with tab1:
        email = st.text_input("Email", key="login_email")
        password = st.text_input("Password", type="password", key="login_password")
        
        if st.button("Login", key="login_button"):
            if email and password:
                if authenticate_user(email, password):
                    st.success("Login successful!")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("Invalid email or password")
            else:
                st.warning("Please enter both email and password")
    
    with tab2:
        email = st.text_input("Email", key="register_email")
        password = st.text_input("Password", type="password", key="register_password")
        confirm_password = st.text_input("Confirm Password", type="password", key="register_confirm_password")
        
        if st.button("Register", key="register_button"):
            if not email or not password or not confirm_password:
                st.warning("Please fill out all fields")
            elif not re.match(r"[^@]+@[^@]+\.[^@]+", email):
                st.error("Please enter a valid email address")
            elif password != confirm_password:
                st.error("Passwords do not match")
            elif len(password) < 8:
                st.error("Password must be at least 8 characters long")
            else:
                if register_user(email, password):
                    st.success("Registration successful! Please login.")
                else:
                    st.error("Email already exists")

def authenticate_user(email, password):
    conn = get_db_connection()
    hashed_password = hash_password(password)
    
    user = conn.execute(
        "SELECT id FROM users WHERE email = ? AND password = ?",
        (email, hashed_password)
    ).fetchone()
    
    conn.close()
    
    if user:
        st.session_state.user_id = user["id"]
        st.session_state.authenticated = True
        return True
    return False

def register_user(email, password):
    conn = get_db_connection()
    hashed_password = hash_password(password)
    
    # Check if user already exists
    existing_user = conn.execute(
        "SELECT id FROM users WHERE email = ?", 
        (email,)
    ).fetchone()
    
    if existing_user:
        conn.close()
        return False
    
    # Create new user
    conn.execute(
        "INSERT INTO users (email, password, api_keys) VALUES (?, ?, ?)",
        (email, hashed_password, json.dumps({}))
    )
    conn.commit()
    conn.close()
    return True

def show_account_sidebar():
    st.markdown("### Account")
    
    # Get user info
    conn = get_db_connection()
    user = conn.execute(
        "SELECT email, subscription_tier, usage_quota, usage_current FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()
    conn.close()
    
    if user:
        st.write(f"**Email:** {user['email']}")
        st.write(f"**Plan:** {user['subscription_tier'].title()}")
        
        # Show usage meter
        usage_percent = min(100, (user['usage_current'] / user['usage_quota']) * 100) if user['usage_quota'] > 0 else 0
        st.progress(usage_percent / 100)
        st.write(f"Usage: {user['usage_current']} / {user['usage_quota']} minutes")
        
        # Upgrade account link
        st.markdown("[Upgrade Account](#)")
    
    # Logout button
    if st.button("Logout"):
        st.session_state.authenticated = False
        st.session_state.user_id = None
        st.rerun()

def get_user_api_keys():
    if not st.session_state.authenticated:
        return {}
    
    conn = get_db_connection()
    user = conn.execute(
        "SELECT api_keys FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()
    conn.close()
    
    if user and user['api_keys']:
        return json.loads(user['api_keys'])
    return {}

def update_usage_tracking(duration_seconds):
    if not st.session_state.authenticated:
        return
    
    # Convert seconds to minutes and round up
    minutes = math.ceil(duration_seconds / 60)
    
    conn = get_db_connection()
    conn.execute(
        "UPDATE users SET usage_current = usage_current + ? WHERE id = ?",
        (minutes, st.session_state.user_id)
    )
    conn.commit()
    conn.close()

# Default prompts in case user prompts are not available
DEFAULT_PROMPTS = {
    "wisdom_extraction": """Extract key insights, lessons, and wisdom from the transcript. Focus on actionable takeaways and profound realizations.""",
    
    "summary": """## Summary
Create a concise summary of the main points and key messages in the transcript.
Capture the essence of the content in a few paragraphs.""",
    
    "outline_creation": """Create a detailed outline for an article or blog post based on the transcript and extracted wisdom. Include major sections and subsections.""",
    
    "social_media": """Generate engaging social media posts for different platforms (Twitter, LinkedIn, Instagram) based on the key insights.""",
    
    "image_prompts": """Create detailed image generation prompts that visualize the key concepts and metaphors from the content.""",
    
    "article_writing": """Write a comprehensive article based on the provided outline and wisdom. Maintain a clear narrative flow and engaging style.""",
    
    "seo_analysis": """Analyze the content from an SEO perspective and provide optimization recommendations for better search visibility while maintaining content quality."""
}

# Set up security headers
def add_security_headers():
    st.markdown("""
        <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'">
        <meta http-equiv="X-Frame-Options" content="DENY">
        <meta http-equiv="X-Content-Type-Options" content="nosniff">
    """, unsafe_allow_html=True)

# Add extended CSS for production look and feel
def add_production_css():
    with open('static/css/production.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# Initialize database with admin user if not exists
def init_admin_user():
    """Create an admin user if none exists"""
    conn = get_db_connection()
    admin_exists = conn.execute(
        "SELECT COUNT(*) FROM users WHERE is_admin = 1"
    ).fetchone()[0]
    
    if admin_exists == 0:
        # Create admin user with default password
        admin_email = os.getenv("ADMIN_EMAIL", "admin@whisperforge.ai")
        admin_password = os.getenv("ADMIN_PASSWORD", "WhisperForge2024!")
        
        hashed_password = hash_password(admin_password)
        
        conn.execute(
            "INSERT INTO users (email, password, is_admin, subscription_tier, usage_quota) VALUES (?, ?, ?, ?, ?)",
            (admin_email, hashed_password, 1, "enterprise", 100000)
        )
        conn.commit()
    
    conn.close()

# Admin tools
def show_admin_page():
    """Show admin dashboard with user management"""
    st.title("Admin Dashboard")

    # Check if user is admin
    user_id = get_current_user_id()
    if user_id is None or not is_admin(user_id):
        st.warning("You must be logged in with admin privileges to access this page.")
        return

    # Create tabs for admin interface
    admin_tabs = st.tabs(["User Management", "Usage Stats", "System Status", "App Configuration"])
    
    # Connect to database
    conn = get_db_connection()
    
    # User Management Tab
    with admin_tabs[0]:
        st.markdown("### User Management")
        
        # Get all users
        users = conn.execute('SELECT * FROM users ORDER BY created_at DESC').fetchall()
        
        if users:
            # Display user table
            user_data = []
            for user in users:
                user_data.append({
                    "ID": user['id'],
                    "Email": user['email'],
                    "Admin": "Yes" if user['is_admin'] else "No",
                    "Created": user['created_at'],
                    "Usage": f"{user['usage_current']}/{user['usage_quota']} min",
                    "Tier": user['subscription_tier']
                })
            
            st.dataframe(user_data)
            
            # User Actions
            st.subheader("User Actions")
            
            # Select user
            selected_user_id = st.selectbox("Select User", options=[u['id'] for u in users], format_func=lambda x: next((u['email'] for u in users if u['id'] == x), ""))
            
            # User details
            selected_user = next((u for u in users if u['id'] == selected_user_id), None)
            if selected_user:
                st.write(f"Email: {selected_user['email']}")
                st.write(f"Admin: {'Yes' if selected_user['is_admin'] else 'No'}")
                st.write(f"Usage: {selected_user['usage_current']}/{selected_user['usage_quota']} minutes")
                
                # Admin toggle
                make_admin = st.checkbox("Admin privileges", value=selected_user['is_admin'])
                
                # Update quota
                new_quota = st.number_input("Usage Quota (minutes)", value=selected_user['usage_quota'], min_value=0)
                
                # Reset usage
                if st.button("Reset Current Usage"):
                    conn.execute('UPDATE users SET usage_current = 0 WHERE id = ?', (selected_user_id,))
                    conn.commit()
                    st.success(f"Reset usage for {selected_user['email']}")
                
                # Save changes
                if st.button("Save Changes"):
                    conn.execute('UPDATE users SET is_admin = ?, usage_quota = ? WHERE id = ?', 
                                (1 if make_admin else 0, new_quota, selected_user_id))
                    conn.commit()
                    st.success(f"Updated user {selected_user['email']}")
        else:
            st.info("No users found in database.")
    
    # Usage Statistics Tab
    with admin_tabs[1]:
        st.markdown("### Usage Statistics")
        
        # Total usage
        total_usage = conn.execute('SELECT SUM(usage_current) as total FROM users').fetchone()
        st.metric("Total Usage (minutes)", total_usage['total'] if total_usage['total'] else 0)
        
        # Active users
        active_users = conn.execute('SELECT COUNT(*) as count FROM users WHERE usage_current > 0').fetchone()
        st.metric("Active Users", active_users['count'])
        
        # Chart: Usage by user
        user_usage = conn.execute('SELECT email, usage_current FROM users ORDER BY usage_current DESC LIMIT 10').fetchall()
        if user_usage:
            chart_data = {"User": [], "Minutes": []}
            for user in user_usage:
                chart_data["User"].append(user['email'])
                chart_data["Minutes"].append(user['usage_current'])
            
            st.bar_chart(chart_data, x="User")
    
    # System Status Tab
    with admin_tabs[2]:
        st.markdown("### System Status")
        
        # Application info
        st.subheader("Application Info")
        st.write(f"Database size: {os.path.getsize('whisperforge.db') / (1024*1024):.2f} MB")
        
        # Check available disk space
        disk_usage = shutil.disk_usage("/")
        st.write(f"Disk Usage: {disk_usage.used / (1024**3):.2f} GB / {disk_usage.total / (1024**3):.2f} GB")
        
        # Log file
        st.subheader("Log File")
        if os.path.exists("whisperforge.log"):
            with open("whisperforge.log", "r") as f:
                log_content = f.readlines()
                st.code(''.join(log_content[-50:]), language="text")  # Show last 50 lines
        else:
            st.info("No log file found.")
    
    # App Configuration Tab
    with admin_tabs[3]:
        st.markdown("### App Configuration")
        
        # User Profile Settings
        st.subheader("User Profile Settings")
        
        # Store previous state before creating the selectbox
        previous_user = st.session_state.get("user_profile_sidebar", "Default")
        
        # Get available users
        available_users = get_available_users()
        
        # Find index for selectbox
        try:
            default_index = available_users.index(previous_user)
        except ValueError:
            default_index = 0
            
        # Create the selectbox
        selected_user = st.selectbox(
            "Default User Profile",
            options=available_users,
            index=default_index,
            key="admin_user_profile"
        )
        
        # Only update session state if button is clicked, not when selectbox changes
        if st.button("Set as Default User Profile"):
            # This occurs after widget creation so it's safe
            st.session_state.user_profile_sidebar = selected_user
            st.success(f"Default user profile set to {selected_user}")
        
        # Knowledge Base Management
        st.subheader("Knowledge Base")
        knowledge_files = list_knowledge_base_files(selected_user)
        if knowledge_files:
            st.write(f"Knowledge base files for {selected_user}:")
            for file in knowledge_files:
                st.code(file, language="")
        else:
            st.info(f"No knowledge base files found for {selected_user}")
        
        # Upload Knowledge Base File
        uploaded_kb_file = st.file_uploader("Upload Knowledge Base File", type=["txt", "md"])
        if uploaded_kb_file is not None:
            file_name = uploaded_kb_file.name
            kb_path = os.path.join('prompts', selected_user, 'knowledge_base')
            os.makedirs(kb_path, exist_ok=True)
            
            with open(os.path.join(kb_path, file_name), "wb") as f:
                f.write(uploaded_kb_file.getvalue())
            
            st.success(f"File {file_name} uploaded to knowledge base for {selected_user}")
        
        # Custom Prompts Configuration
        st.subheader("Custom Prompts")
        
        # Configure custom prompts for the selected user
        configure_prompts(selected_user)
    
    conn.close()
    
# Show terms and privacy
def show_legal_page():
    """Show terms of service and privacy policy"""
    st.markdown("## Legal Information")
    
    tab1, tab2 = st.tabs(["Terms of Service", "Privacy Policy"])
    
    with tab1:
        st.markdown("""
        # WhisperForge Terms of Service
        
        Last updated: April 1, 2024
        
        ## 1. Acceptance of Terms
        
        By accessing or using WhisperForge ("the Service"), you agree to be bound by these Terms of Service. If you do not agree to these terms, please do not use the Service.
        
        ## 2. Description of Service
        
        WhisperForge is an AI-powered audio transcription and content generation tool that provides transcription services, content analysis, and content creation capabilities.
        
        ## 3. User Accounts
        
        To use certain features of the Service, you must register for an account. You agree to provide accurate information and to keep this information updated. You are responsible for maintaining the confidentiality of your account credentials and for all activities that occur under your account.
        
        ## 4. Usage Limitations
        
        Different subscription tiers have different usage limits. You agree not to exceed the limits of your subscription tier.
        
        ## 5. API Keys and Third-Party Services
        
        The Service allows you to use your own API keys for third-party services such as OpenAI, Anthropic, and Notion. You are responsible for:
        - Obtaining and maintaining valid API keys
        - Any costs associated with your use of these third-party services
        - Complying with the terms of service of these third-party providers
        
        ## 6. Content Ownership
        
        You retain ownership of all content you upload or create using the Service. However, you grant WhisperForge a non-exclusive license to use, store, and process your content for the purpose of providing the Service.
        
        ## 7. Prohibited Uses
        
        You agree not to use the Service for any illegal or prohibited purpose, including but not limited to:
        - Violating intellectual property rights
        - Distributing malware or engaging in phishing
        - Generating harmful, abusive, or deceptive content
        - Attempting to gain unauthorized access to the system
        
        ## 8. Termination
        
        WhisperForge reserves the right to terminate or suspend your account at any time for violation of these terms or for any other reason.
        
        ## 9. Changes to Terms
        
        WhisperForge may modify these terms at any time. Continued use of the Service after such changes constitutes your acceptance of the new terms.
        
        ## 10. Contact
        
        If you have any questions about these Terms, please contact us at support@whisperforge.ai.
        """)
    
    with tab2:
        st.markdown("""
        # WhisperForge Privacy Policy
        
        Last updated: April 1, 2024
        
        ## 1. Information We Collect
        
        We collect the following types of information:
        
        ### 1.1 Account Information
        - Email address
        - Hashed password
        - Subscription details
        
        ### 1.2 Content Data
        - Audio files you upload for transcription
        - Transcriptions and content generated from your audio
        - API keys you provide for third-party services
        
        ### 1.3 Usage Information
        - Features you use
        - Time spent using the Service
        - Error logs and performance data
        
        ## 2. How We Use Your Information
        
        We use your information to:
        - Provide and improve the Service
        - Process payments and manage subscriptions
        - Communicate with you about your account
        - Monitor and analyze usage patterns
        
        ## 3. Data Security
        
        We implement reasonable security measures to protect your information. Your API keys are encrypted in our database. We do not store your audio files longer than necessary to process them.
        
        ## 4. Third-Party Services
        
        When you use your own API keys, your content may be processed by these third-party services according to their privacy policies:
        - OpenAI (for transcription and AI processing)
        - Anthropic (for AI processing)
        - Notion (for content export)
        
        ## 5. Cookies and Tracking
        
        We use cookies and similar technologies to track usage of our Service and remember your preferences.
        
        ## 6. Your Rights
        
        Depending on your location, you may have rights to:
        - Access your personal information
        - Correct inaccurate information
        - Delete your data
        - Object to processing
        - Export your data
        
        ## 7. Changes to Privacy Policy
        
        We may update this privacy policy from time to time. We will notify you of any significant changes.
        
        ## 8. Contact
        
        If you have questions about our privacy practices, please contact us at privacy@whisperforge.ai.
        """)

def direct_transcribe_audio(audio_file_path, api_key=None):
    """
    Transcribe audio directly using the OpenAI API without relying on the OpenAI Python client.
    This is a fallback method to use when the OpenAI client has initialization issues.
    """
    logger.debug(f"Starting direct transcription of {audio_file_path}")
    
    if not api_key:
        api_key = get_api_key_for_service("openai")
        if not api_key:
            logger.error("No OpenAI API key available")
            return "Error: OpenAI API key is not provided or configured"
    
    try:
        import requests
        
        logger.debug("Preparing API request for direct transcription")
        url = "https://api.openai.com/v1/audio/transcriptions"
        headers = {
            "Authorization": f"Bearer {api_key}"
        }
        
        # Check file exists
        if not os.path.exists(audio_file_path):
            logger.error(f"Audio file not found: {audio_file_path}")
            return "Error: Audio file not found"
        
        # Log file details
        file_size = os.path.getsize(audio_file_path)
        logger.debug(f"Audio file size: {file_size/1024/1024:.2f} MB")
        
        # Open the file in binary mode
        with open(audio_file_path, "rb") as audio_file:
            files = {
                "file": (os.path.basename(audio_file_path), audio_file, "audio/mpeg"),
                "model": (None, "whisper-1")
            }
            
            logger.debug("Sending request to OpenAI API")
            response = requests.post(url, headers=headers, files=files, timeout=120)
            
            # Check for errors
            if response.status_code != 200:
                logger.error(f"API Error: {response.status_code} - {response.text}")
                return f"Error: API returned status code {response.status_code}: {response.text}"
            
            # Parse the response
            try:
                result = response.json()
                logger.debug("Successfully received transcription from API")
                return result.get("text", "")
            except Exception as parse_error:
                logger.error(f"Error parsing API response: {str(parse_error)}")
                return f"Error parsing API response: {str(parse_error)}"
                
    except Exception as e:
        logger.exception("Exception in direct_transcribe_audio:")
        return f"Error transcribing audio directly: {str(e)}"

def direct_anthropic_completion(prompt, api_key=None, model="claude-3-7-sonnet-20250219"):
    """
    Generate content directly using the Anthropic API without relying on the Anthropic client.
    This is a fallback method to use when the Anthropic client has initialization issues.
    """
    logger.debug(f"Starting direct Anthropic API call for model: {model}")
    
    if not api_key:
        api_key = get_api_key_for_service("anthropic")
        if not api_key:
            logger.error("No Anthropic API key available")
            return "Error: Anthropic API key is not provided or configured"
    
    try:
        import requests
        import json
        
        logger.debug("Preparing API request for Anthropic")
        url = "https://api.anthropic.com/v1/messages"
        headers = {
            "x-api-key": api_key,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }
        
        # Prepare the payload
        payload = {
            "model": model,
            "max_tokens": 1500,
            "messages": [
                {"role": "user", "content": prompt}
            ]
        }
        
        logger.debug(f"Payload prepared, content length: {len(prompt)} characters")
        
        # Send the request
        logger.debug("Sending request to Anthropic API")
        response = requests.post(url, headers=headers, json=payload, timeout=120)
        
        # Check for errors
        if response.status_code != 200:
            logger.error(f"API Error: {response.status_code} - {response.text}")
            return f"Error: API returned status code {response.status_code}: {response.text}"
        
        # Parse the response
        try:
            result = response.json()
            logger.debug("Successfully received content from Anthropic API")
            # Extract the content
            if "content" in result and len(result["content"]) > 0:
                return result["content"][0]["text"]
            else:
                logger.error("Response did not contain expected content")
                return "Error: Response did not contain expected content"
        except Exception as parse_error:
            logger.error(f"Error parsing API response: {str(parse_error)}")
            return f"Error parsing Anthropic API response: {str(parse_error)}"
            
    except Exception as e:
        logger.exception("Exception in direct_anthropic_completion:")
        return f"Error generating content directly with Anthropic: {str(e)}"

def export_to_notion():
    """Export content to Notion using the create_content_notion_entry function"""
    try:
        logger.debug("Starting export to Notion")
        
        # Gather content
        title = st.session_state.get("file_name", "Untitled Audio")
        transcript = st.session_state.get("transcript", "")
        wisdom = st.session_state.get("wisdom", None)
        outline = st.session_state.get("outline", None)
        social_content = st.session_state.get("social_content", None)
        image_prompts = st.session_state.get("image_prompts", None)
        article = st.session_state.get("article", None)
        
        # Create content in Notion
        result = create_content_notion_entry(
            title=title,
            transcript=transcript,
            wisdom=wisdom,
            outline=outline,
            social_content=social_content,
            image_prompts=image_prompts,
            article=article
        )
        
        if result:
            logger.debug(f"Successfully exported to Notion: {result}")
            return result
        else:
            logger.error("Failed to export to Notion")
            st.error("Failed to export to Notion. Please check your Notion API configuration.")
            return None
    
    except Exception as e:
        logger.exception("Error in export_to_notion:")
        st.error(f"Error exporting to Notion: {str(e)}")
        return None

def direct_notion_save(title, transcript, wisdom=None, outline=None, social_content=None, image_prompts=None, article=None):
    """
    Save content directly to Notion API without relying on the notion_client library.
    """
    logger.debug(f"Starting direct Notion save for title: {title}")
    
    # Get API key and database ID
    api_key = get_api_key_for_service("notion")
    database_id = get_notion_database_id()
    
    if not api_key:
        logger.error("No Notion API key available")
        return {"error": "Error: Notion API key is not provided or configured"}
        
    if not database_id:
        logger.error("No Notion database ID available")
        return {"error": "Error: Notion database ID is not provided or configured"}
    
    try:
        import requests
        import json
        from datetime import datetime
        
        # Generate AI title if none provided or generic title
        if not title or title == "Untitled Audio" or title == "Untitled Content" or title.startswith("WhisperForge"):
            logger.debug("Generating AI title for Notion page")
            ai_title = generate_short_title(transcript)
            title = ai_title
            logger.debug(f"Generated title: {title}")
        
        # Generate tags for the content
        logger.debug("Generating tags for Notion page")
        content_tags = generate_content_tags(transcript, wisdom)
        logger.debug(f"Generated tags: {content_tags}")
        
        logger.debug("Preparing API request for Notion")
        url = "https://api.notion.com/v1/pages"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        # Initialize content blocks
        children = []
        
        # Add summary if wisdom is available
        if wisdom:
            children.append({
                "object": "block",
                "type": "callout",
                "callout": {
                    "rich_text": [{"type": "text", "text": {"content": wisdom[:2000]}}],
                    "color": "purple_background",
                    "icon": {"type": "emoji", "emoji": "üíú"}
                }
            })
        
        # Add transcript toggle
        if transcript:
            # Split transcript into chunks to respect Notion's block size limit
            transcript_chunks = [transcript[i:i+2000] for i in range(0, len(transcript), 2000)]
            
            # Create transcript toggle
            transcript_blocks = [{
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                }
            } for chunk in transcript_chunks]
            
            children.append({
                "object": "block",
                "type": "toggle",
                "toggle": {
                    "rich_text": [{"type": "text", "text": {"content": "‚ñ∂Ô∏è Transcription"}}],
                    "children": transcript_blocks
                }
            })
        
        # Add wisdom toggle
        if wisdom:
            children.append({
                "object": "block",
                "type": "toggle",
                "toggle": {
                    "rich_text": [{"type": "text", "text": {"content": "‚ñ∂Ô∏è Wisdom"}}],
                    "children": [{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": wisdom[:2000]}}]
                        }
                    }]
                }
            })
        
        # Add outline toggle
        if outline:
            children.append({
                "object": "block",
                "type": "toggle",
                "toggle": {
                    "rich_text": [{"type": "text", "text": {"content": "‚ñ∂Ô∏è Outline"}}],
                    "children": [{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": outline[:2000]}}]
                        }
                    }]
                }
            })
        
        # Add metadata section
        children.append({
            "object": "block",
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "Metadata"}}]
            }
        })
        
        children.append({
            "object": "block",
            "type": "paragraph",
            "paragraph": {
                "rich_text": [
                    {"type": "text", "text": {"content": "Created with "}},
                    {"type": "text", "text": {"content": "WhisperForge"}, "annotations": {"bold": True, "color": "purple"}}
                ]
            }
        })
        
        # Add tags to metadata
        if content_tags:
            tags_text = ", ".join(content_tags)
            children.append({
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {"type": "text", "text": {"content": "Tags: "}, "annotations": {"bold": True}},
                        {"type": "text", "text": {"content": tags_text}}
                    ]
                }
            })
        
        # Prepare the payload
        payload = {
            "parent": {"database_id": database_id},
            "properties": {
                "Name": {
                    "title": [{"text": {"content": title}}]
                },
                "Created": {
                    "date": {"start": datetime.now().isoformat()}
                }
            },
            "children": children
        }
        
        # Add tags to properties if the database has a multi-select Tags property
        if content_tags:
            payload["properties"]["Tags"] = {"multi_select": [{"name": tag} for tag in content_tags]}
        
        logger.debug(f"Payload prepared with {len(children)} content blocks")
        
        # Send the request
        logger.debug("Sending request to Notion API")
        response = requests.post(url, headers=headers, json=payload)
        
        # Check for errors
        if response.status_code != 200:
            logger.error(f"API Error: {response.status_code} - {response.text}")
            return {"error": f"Error: API returned status code {response.status_code}: {response.text}"}
        
        # Parse the response
        result = response.json()
        logger.debug("Successfully saved page to Notion")
        
        return {"url": result.get("url", ""), "id": result.get("id", "")}
            
    except Exception as e:
        logger.exception("Exception in direct_notion_save:")
        return {"error": f"Error saving to Notion: {str(e)}"}

def is_admin_user():
    """Check if the current user is an admin"""
    try:
        conn = get_db_connection()
        is_admin = conn.execute(
            "SELECT is_admin FROM users WHERE id = ?",
            (st.session_state.user_id,)
        ).fetchone()
        conn.close()
        
        return is_admin and is_admin[0]
    except Exception:
        return False

def create_custom_header():
    # See if Admin link should be visible
    admin_link = ""
    if is_admin_user():
        admin_link = '<a href="?page=admin" class="nav-item" id="nav-admin">Admin</a>'
    
    # Create the HTML and JS as separate strings
    header_html = f'''
    <div class="header-container">
        <div class="header-left">
            <div class="header-title">WhisperForge // Control_Center</div>
        </div>
        <div class="header-nav">
            <a href="?page=home" class="nav-item" id="nav-home">Home</a>
            <a href="?page=api" class="nav-item" id="nav-api">API Keys</a>
            <a href="?page=usage" class="nav-item" id="nav-usage">Usage</a>
            <a href="?page=user_config" class="nav-item" id="nav-user-config">User Config</a>
            {admin_link}
            <a href="?page=legal" class="nav-item" id="nav-legal">Legal</a>
        </div>
        <div class="header-right">
            <div class="header-date">{datetime.now().strftime("%Y-%m-%d %H:%M")}</div>
        </div>
    </div>
    '''
    
    # JavaScript as a separate string
    js_code = '''
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get current URL and extract page parameter
            const urlParams = new URLSearchParams(window.location.search);
            const currentPage = urlParams.get('page') || 'home';
            
            // Find all navigation links
            const navLinks = document.querySelectorAll('.nav-item');
            
            // Loop through links and add active class to current page
            navLinks.forEach(link => {
                const linkId = link.id;
                if (linkId === 'nav-' + currentPage) {
                    link.classList.add('active');
                }
            });
        });
    </script>
    '''
    
    # Combine the HTML and JavaScript
    full_header = header_html + js_code
    st.markdown(full_header, unsafe_allow_html=True)

def load_js():
    """Load JavaScript files"""
    # Load cookie consent JavaScript
    with open('static/js/cookie-consent.js') as f:
        st.markdown(f'<script>{f.read()}</script>', unsafe_allow_html=True)
        
    # Load UI interactions JavaScript
    with open('static/js/ui-interactions.js') as f:
        st.markdown(f'<script>{f.read()}</script>', unsafe_allow_html=True)

# Show cookie consent banner if necessary
def show_cookie_banner():
    if st.session_state.show_cookie_banner:
        cookie_banner_html = """
        <div class="cookie-banner">
            <div>
                We use cookies to improve your experience. By continuing, you consent to our use of cookies.
                <a href="?page=legal">Learn more</a>
            </div>
            <div class="cookie-banner-buttons">
                <button>Accept</button>
            </div>
        </div>
        """
        st.markdown(cookie_banner_html, unsafe_allow_html=True)

def transcribe_with_whisper(file_path):
    """Transcribe an audio file directly using OpenAI's Whisper API"""
    try:
        api_key = get_api_key_for_service("openai")
        if not api_key:
            error_msg = "OpenAI API key is not configured"
            logger.error(error_msg)
            st.error(f"‚ùå {error_msg}. Please set up your API key in the settings.")
            return ""
        
        logger.info(f"Starting direct transcription of file: {file_path}")
        
        # Verify file exists and is readable
        if not os.path.exists(file_path):
            error_msg = f"File not found: {file_path}"
            logger.error(error_msg)
            st.error(f"‚ùå {error_msg}")
            return ""
        
        # Check file size
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            error_msg = "Audio file is empty"
            logger.error(error_msg)
            st.error(f"‚ùå {error_msg}")
            return ""
        
        # Create progress indicators
        progress_text = st.empty()
        progress_text.text("Preparing audio for transcription...")
        progress_bar = st.progress(0)
        
        # Progress update function for use in both methods
        def update_progress(progress, message):
            progress_bar.progress(progress)
            progress_text.text(message)
        
        # Try direct API call first (more robust method)
        try:
            update_progress(0.2, "Uploading audio to OpenAI API...")
            
            # Use requests for direct API call
            import requests
            import json
            
            # Prepare the API request
            headers = {
                "Authorization": f"Bearer {api_key}"
            }
            
            url = "https://api.openai.com/v1/audio/transcriptions"
            
            # Set transcription options
            options = {}
            
            # Check for language code in session state
            if st.session_state.get('language_code') and st.session_state.get('language_code') != 'auto':
                options['language'] = st.session_state.get('language_code')
                logger.debug(f"Setting language to: {options['language']}")
            
            # Check for response format preference
            response_format = st.session_state.get('response_format', 'text')
            options['response_format'] = response_format
            
            # Get model preference or use default
            model = st.session_state.get('transcription_model', 'whisper-1')
            
            # Create form data
            files = {
                'file': open(file_path, 'rb')
            }
            
            data = {
                'model': model,
                **options
            }
            
            # Attempt the API call
            update_progress(0.4, "Sending request to OpenAI API...")
            logger.debug(f"Making OpenAI API request with model: {model}, options: {options}")
            
            response = requests.post(url, headers=headers, files=files, data=data)
            
            # Process the response
            update_progress(0.8, "Processing API response...")
            
            if response.status_code == 200:
                if response_format == 'text':
                    transcript = response.text
                else:
                    result = response.json()
                    transcript = result.get('text', '')
                
                update_progress(1.0, "Transcription complete!")
                logger.info(f"Transcription successful, received {len(transcript)} characters")
                return transcript
            
            elif response.status_code == 429:
                error_msg = "OpenAI API rate limit exceeded. Please try again later."
                logger.error(f"API Rate Limit (429): {error_msg}")
                raise Exception(error_msg)
            
            elif response.status_code == 401:
                error_msg = "Invalid API key. Please check your OpenAI API key."
                logger.error(f"API Authentication Error (401): {error_msg}")
                raise Exception(error_msg)
            
            else:
                # Try to parse error details
                try:
                    error_data = response.json()
                    error_msg = error_data.get('error', {}).get('message', 'Unknown API error')
                except:
                    error_msg = f"API error (status {response.status_code}): {response.text}"
                
                logger.error(f"API Error: {error_msg}")
                raise Exception(error_msg)
        
        except requests.exceptions.RequestException as req_error:
            # If direct API call fails due to request issues, try OpenAI client library
            logger.warning(f"Direct API request failed: {str(req_error)}. Falling back to client library.")
            update_progress(0.3, "Direct API call failed, trying alternative method...")
            
            # Use OpenAI client library as fallback
            try:
                from openai import OpenAI
                
                # Create client
                client = OpenAI(api_key=api_key)
                
                update_progress(0.5, "Processing with OpenAI client...")
                
                # Set transcription options
                options = {}
                
                # Check for language code in session state
                if st.session_state.get('language_code') and st.session_state.get('language_code') != 'auto':
                    options['language'] = st.session_state.get('language_code')
                
                # Get model preference or use default
                model = st.session_state.get('transcription_model', 'whisper-1')
                
                response_format = st.session_state.get('response_format', 'text')
                
                # Make the API call
                with open(file_path, "rb") as audio_file:
                    update_progress(0.7, "Sending to OpenAI service...")
                    response = client.audio.transcriptions.create(
                        model=model,
                        file=audio_file,
                        response_format=response_format,
                        **options
                    )
                
                update_progress(0.9, "Processing response...")
                
                # Extract transcript based on response format
                if response_format == 'text':
                    transcript = response
                else:
                    transcript = response.text
                
                update_progress(1.0, "Transcription complete!")
                logger.info(f"Client library transcription successful, received {len(transcript)} characters")
                return transcript
            except Exception as client_error:
                logger.error(f"Client library transcription failed: {str(client_error)}")
                raise Exception(f"Transcription failed: {str(client_error)}")
        
        finally:
            # Clean up progress indicators
            progress_text.empty()
            progress_bar.empty()
    
    except Exception as e:
        error_msg = f"Error in transcribe_with_whisper: {str(e)}"
        logger.error(error_msg, exc_info=True)
        st.error(f"‚ùå {error_msg}")
        return f"[Error transcribing audio: {str(e)}]"

def show_user_config_page():
    """Show user configuration page for managing profiles, knowledge base, and prompts"""
    st.title("User Configuration")
    
    # Get available users and prompts
    users, users_prompts = load_prompts()
    
    # Add tabs for different configuration sections
    config_tabs = st.tabs(["User Profiles", "Knowledge Base", "Prompt Templates"])
    
    # Tab 1: User Profiles Management
    with config_tabs[0]:
        st.header("User Profiles")
        st.write("Manage user profiles for different content generation styles and preferences.")
        
        # Current users list
        st.subheader("Current Profiles")
        user_table = {"Profile Name": [], "Knowledge Files": [], "Custom Prompts": []}
        
        for user in users:
            # Count knowledge base files
            kb_files = list_knowledge_base_files(user)
            kb_count = len(kb_files)
            
            # Count custom prompts
            if user in users_prompts:
                prompt_count = len(users_prompts[user])
            else:
                prompt_count = 0
                
            user_table["Profile Name"].append(user)
            user_table["Knowledge Files"].append(kb_count)
            user_table["Custom Prompts"].append(prompt_count)
        
        # Display user profiles as a table
        st.dataframe(user_table)
        
        # Create new profile
        st.subheader("Create New Profile")
        new_user = st.text_input("New Profile Name", key="new_profile_name",
                                help="Enter a name for the new user profile. Use only letters, numbers, and underscores.")
        
        if st.button("Create Profile", key="create_profile_btn"):
            if not new_user:
                st.error("Please enter a valid profile name")
            elif not re.match(r'^[a-zA-Z0-9_]+$', new_user):
                st.error("Profile name can only contain letters, numbers, and underscores")
            elif new_user in users:
                st.error(f"Profile '{new_user}' already exists")
            else:
                # Create user directories
                user_dir = os.path.join("prompts", new_user)
                kb_dir = os.path.join(user_dir, "knowledge_base")
                
                try:
                    os.makedirs(user_dir, exist_ok=True)
                    os.makedirs(kb_dir, exist_ok=True)
                    st.success(f"Created new profile: {new_user}")
                    st.session_state.user_profile_sidebar = new_user
                    st.rerun()
                except Exception as e:
                    st.error(f"Error creating profile: {str(e)}")
    
    # Tab 2: Knowledge Base Management
    with config_tabs[1]:
        st.header("Knowledge Base")
        st.write("Manage knowledge base files for the selected user profile. These files provide context and style guidance for AI-generated content.")
        
        # Select user profile
        selected_user = st.selectbox("Select Profile", options=users, key="kb_profile_select")
        
        if selected_user:
            # Knowledge base directory for selected user
            kb_dir = os.path.join("prompts", selected_user, "knowledge_base")
            os.makedirs(kb_dir, exist_ok=True)
            
            # List existing knowledge base files
            kb_files = list_knowledge_base_files(selected_user)
            
            if kb_files:
                st.subheader("Current Knowledge Base Files")
                
                # Create a dictionary of filenames to display names
                file_options = {}
                for file_path in kb_files:
                    filename = os.path.basename(file_path)
                    name = os.path.splitext(filename)[0].replace('_', ' ').title()
                    file_options[name] = file_path
                
                # File selection
                selected_file = st.selectbox("Select File", options=list(file_options.keys()), key="kb_file_select")
                
                if selected_file and selected_file in file_options:
                    file_path = file_options[selected_file]
                    
                    # Read and display file content
                    try:
                        with open(file_path, 'r') as f:
                            file_content = f.read()
                        
                        # Edit file
                        new_content = st.text_area("Edit File Content", value=file_content, height=300, key="kb_file_edit")
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("Update File", key="update_kb_file"):
                                try:
                                    with open(file_path, 'w') as f:
                                        f.write(new_content)
                                    st.success(f"Updated knowledge base file: {selected_file}")
                                except Exception as e:
                                    st.error(f"Error updating file: {str(e)}")
                        
                        with col2:
                            if st.button("Delete File", key="delete_kb_file"):
                                try:
                                    os.remove(file_path)
                                    st.success(f"Deleted knowledge base file: {selected_file}")
                                    st.rerun()
                                except Exception as e:
                                    st.error(f"Error deleting file: {str(e)}")
                    
                    except Exception as e:
                        st.error(f"Error reading file: {str(e)}")
            
            # Upload new knowledge base file
            st.subheader("Add New Knowledge Base File")
            
            # Method 1: Upload file
            uploaded_file = st.file_uploader("Upload Knowledge Base File", 
                                           type=["txt", "md"], 
                                           key="kb_file_upload",
                                           help="Upload a text or markdown file to add to the knowledge base")
            
            if uploaded_file:
                file_name = uploaded_file.name
                if st.button("Add Uploaded File", key="add_uploaded_kb"):
                    try:
                        file_path = os.path.join(kb_dir, file_name)
                        with open(file_path, 'wb') as f:
                            f.write(uploaded_file.getvalue())
                        st.success(f"Added knowledge base file: {file_name}")
                        st.rerun()
                    except Exception as e:
                        st.error(f"Error saving file: {str(e)}")
            
            # Method 2: Create file
            st.subheader("Create New Knowledge Base File")
            new_file_name = st.text_input("File Name (without extension)", key="new_kb_filename",
                                         help="Enter a name for the new file (without extension)")
            new_file_content = st.text_area("File Content", height=200, key="new_kb_content")
            
            if st.button("Create File", key="create_kb_file"):
                if not new_file_name:
                    st.error("Please enter a file name")
                else:
                    try:
                        # Clean filename
                        clean_name = re.sub(r'[^\w\s-]', '', new_file_name)
                        clean_name = re.sub(r'[\s-]+', '_', clean_name).lower()
                        
                        # Add .md extension
                        file_path = os.path.join(kb_dir, f"{clean_name}.md")
                        
                        # Check if file already exists
                        if os.path.exists(file_path):
                            st.error(f"File {clean_name}.md already exists")
                        else:
                            with open(file_path, 'w') as f:
                                f.write(new_file_content)
                            st.success(f"Created knowledge base file: {clean_name}.md")
                            st.rerun()
                    except Exception as e:
                        st.error(f"Error creating file: {str(e)}")
    
    # Tab 3: Prompt Template Management
    with config_tabs[2]:
        st.header("Prompt Templates")
        st.write("Customize prompt templates for different content generation tasks.")
        
        # Select user profile
        selected_user = st.selectbox("Select Profile", options=users, key="prompt_profile_select")
        
        if selected_user:
            # Use the existing configure_prompts function
            configure_prompts(selected_user)
            
            # Add explanation of prompt variables
            with st.expander("Prompt Template Help"):
                st.markdown("""
                ### Prompt Template Variables
                
                Your prompt templates can include the following variables which will be replaced with actual content:
                
                - `{transcript}` - The full transcript text
                - `{knowledge_base}` - Any knowledge base context that's relevant
                
                ### Prompt Template Format
                
                For best results, structure your prompts as follows:
                
                ```
                ## Instructions
                Instructions for the AI on how to approach the task.
                
                ## Context
                Any contextual information about your style, preferences, or requirements.
                
                ## Prompt
                The actual prompt that will be sent to the AI.
                ```
                
                Only the section after "## Prompt" is required, but adding instructions and context helps organize your templates.
                """)

if __name__ == "__main__":
    main() 