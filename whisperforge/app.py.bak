import streamlit as st
from openai import OpenAI  # Make sure this is using the OpenAI v1 API
from dotenv import load_dotenv
import os
from notion_client import Client
from datetime import datetime
from pydub import AudioSegment
import tempfile
import math
import glob
from anthropic import Anthropic
import requests  # for Grok API
import shutil
from pathlib import Path
import hashlib
import uuid
import sqlite3
import jwt
from datetime import datetime, timedelta
import time
import re
import json
import streamlit.components.v1 as components
import concurrent.futures
import threading
import openai
import logging
import sys
import soundfile as sf

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("whisperforge.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("whisperforge")

# This must be the very first st.* command
st.set_page_config(
    page_title="WhisperForge | Audio to Content Platform",
    page_icon="üéôÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load environment variables
load_dotenv()

# Database setup
def get_db_connection():
    conn = sqlite3.connect('whisperforge.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            api_keys TEXT,
            usage_quota INTEGER DEFAULT 60,  -- Minutes per month
            usage_current INTEGER DEFAULT 0,
            is_admin INTEGER DEFAULT 0,
            subscription_tier TEXT DEFAULT 'free'
        )
    ''')
    conn.commit()
    conn.close()

# Initialize database
init_db()

# Password hashing
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# JWT functions
def create_jwt_token(user_id):
    expiration = datetime.utcnow() + timedelta(hours=24)
    payload = {
        "user_id": user_id,
        "exp": expiration
    }
    secret = os.getenv("JWT_SECRET", "whisperforge-secret-key")
    token = jwt.encode(payload, secret, algorithm="HS256")
    return token

def validate_jwt_token(token):
    try:
        secret = os.getenv("JWT_SECRET", "whisperforge-secret-key")
        payload = jwt.decode(token, secret, algorithms=["HS256"])
        return payload["user_id"]
    except:
        return None

# Initialization of clients - will be called as needed with user-specific API keys
def get_openai_client():
    logger.debug("Entering get_openai_client function")
    api_key = get_api_key_for_service("openai")
    if not api_key:
        logger.error("OpenAI API key is not set")
        st.error("OpenAI API key is not set. Please add your API key in the settings.")
        return None
    
    logger.debug(f"Got API key (length: {len(api_key)})")
    
    # Log environment variables that might affect client initialization
    logger.debug("Checking environment variables that might affect client initialization:")
    for env_var in os.environ:
        if 'proxy' in env_var.lower() or 'http_' in env_var.lower() or 'openai' in env_var.lower():
            logger.debug(f"  Found environment variable: {env_var}")
    
    # Create client with just the API key, no extra parameters
    try:
        logger.debug("Attempting to initialize OpenAI client with ONLY api_key parameter")
        
        # Create a completely clean approach - don't use any environment variables
        client_kwargs = {'api_key': api_key}
        
        # Log what we're passing to OpenAI
        logger.debug(f"OpenAI initialization parameters: {client_kwargs}")
        
        # Try direct initialization as a last resort
        client = OpenAI(**client_kwargs)
        logger.debug("Successfully initialized OpenAI client")
        return client
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error initializing OpenAI client: {error_msg}")
        logger.exception("Full exception details:")
        
        # Try alternative initialization if 'proxies' is in the error
        if 'proxies' in error_msg:
            logger.debug("Trying alternative initialization approach due to proxies error")
            try:
                # Alternative approach - don't use OpenAI client class directly
                # Instead use a simple function-based approach
                
                # Define a simple function to make API requests directly
                def simple_transcribe(audio_file):
                    import requests
                    url = "https://api.openai.com/v1/audio/transcriptions"
                    headers = {
                        "Authorization": f"Bearer {api_key}"
                    }
                    files = {
                        "file": audio_file,
                        "model": (None, "whisper-1")
                    }
                    response = requests.post(url, headers=headers, files=files)
                    return response.json()
                
                # Create a minimal client object that just has the transcribe method
                class MinimalOpenAIClient:
                    def __init__(self, api_key):
                        self.api_key = api_key
                        self.audio = type('', (), {})()
                        self.audio.transcriptions = type('', (), {})()
                        self.audio.transcriptions.create = simple_transcribe
                
                logger.debug("Created minimal OpenAI client replacement")
                return MinimalOpenAIClient(api_key)
            except Exception as alt_e:
                logger.error(f"Alternative initialization also failed: {str(alt_e)}")
        
        st.error(f"Error initializing OpenAI client: {error_msg}")
        return None

def get_anthropic_client():
    api_key = get_api_key_for_service("anthropic")
    if not api_key:
        st.error("Anthropic API key is not set. Please add your API key in the settings.")
        return None
    return Anthropic(api_key=api_key)

def get_notion_client():
    api_key = get_api_key_for_service("notion")
    if not api_key:
        st.error("Notion API key is not set. Please add your API key in the settings.")
        return None
    return Client(auth=api_key)

def get_notion_database_id():
    api_keys = get_user_api_keys()
    db_id = api_keys.get("notion_database_id")
    if not db_id:
        db_id = os.getenv("NOTION_DATABASE_ID")
    return db_id

def get_grok_api_key():
    return get_api_key_for_service("grok")

# Available LLM models grouped by provider
LLM_MODELS = {
    "OpenAI": {
        "GPT-4 (Most Capable)": "gpt-4",
        "GPT-4 Turbo": "gpt-4-turbo-preview",
        "GPT-3.5 Turbo (Faster)": "gpt-3.5-turbo",
    },
    "Anthropic": {
        "Claude 3 Opus": "claude-3-opus-20240229",
        "Claude 3 Sonnet": "claude-3-sonnet-20240229",
        "Claude 3 Haiku": "claude-3-haiku-20240307",
    },
    "Grok": {
        "Grok-1": "grok-1",
    }
}

def local_css():
    """Apply refined cyberpunk styling inspired by Luma's interface"""
    with open('static/css/main.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    
    # Add the scanner line animation div
    st.markdown('<div class="scanner-line"></div>', unsafe_allow_html=True)

def load_prompts():
    """Load prompt templates from the prompts directory"""
    prompts = {}  # Just one dict for all prompts
    
    # Check if prompts directory exists
    if not os.path.exists("prompts"):
        os.makedirs("prompts")
        st.info("Created prompts directory. Please add prompt templates.")
        return prompts
    
    # Load prompts from the main prompts directory
    try:
        prompt_files = [f for f in os.listdir("prompts") if f.endswith('.md') and os.path.isfile(os.path.join("prompts", f))]
        
        # Load each prompt file
        for prompt_file in prompt_files:
            prompt_name = os.path.splitext(prompt_file)[0]
            try:
                with open(os.path.join("prompts", prompt_file), 'r') as f:
                    prompt_content = f.read()
                prompts[prompt_name] = prompt_content
            except Exception as e:
                st.warning(f"Error loading prompt {prompt_file}: {str(e)}")
    except Exception as e:
        st.warning(f"Error accessing prompts directory: {str(e)}")
    
    return prompts

def get_prompt(prompt_type, prompts, default_prompts):
    """Get a prompt for a specific type, falling back to default if needed"""
    prompt = prompts.get(prompt_type)
    if not prompt:
        prompt = default_prompts.get(prompt_type)
    return prompt

def save_prompt(prompt_type, prompt_content):
    """Save a custom prompt for a specific type"""
    prompt_path = os.path.join("prompts", f"{prompt_type}.md")
    try:
        with open(prompt_path, 'w') as f:
            f.write(prompt_content)
        st.success(f"Saved prompt: {prompt_type}")
    except Exception as e:
        st.error(f"Error saving prompt: {str(e)}")

def load_knowledge_base():
    """Load knowledge base files"""
    knowledge_base = {}
    kb_path = 'prompts/knowledge_base'
    
    if os.path.exists(kb_path):
        for file in os.listdir(kb_path):
            if file.endswith(('.txt', '.md')):
                with open(os.path.join(kb_path, file), 'r') as f:
                    name = os.path.splitext(file)[0].replace('_', ' ').title()
                    knowledge_base[name] = f.read()
    
    return knowledge_base

def configure_prompts(prompts):
    """Configure prompts for the current user"""
    st.markdown("### Configure Prompts")
    
    # Display current prompts
    st.markdown("#### Current Prompts")
    for prompt_type, prompt_content in prompts.items():
        st.markdown(f"**{prompt_type.replace('_', ' ').title()}**")
        st.write(prompt_content)
        
        # Edit button
        if st.button(f"Edit {prompt_type.replace('_', ' ').title()}"):
            new_content = st.text_area("Edit Prompt", prompt_content)
            if st.button("Save"):
                save_prompt(prompt_type, new_content)
                st.rerun()
        
        st.write("---")
    
    # Add new prompt
    st.markdown("#### Add New Prompt")
    new_prompt_type = st.text_input("Prompt Type")
    new_prompt_content = st.text_area("Prompt Content")
    
    if st.button("Add Prompt"):
        if new_prompt_type and new_prompt_content:
            save_prompt(new_prompt_type, new_prompt_content)
            st.rerun()
        else:
            st.warning("Please enter both prompt type and content.")

def apply_prompt(text, prompt_content, provider, model, user_knowledge=None):
    """Apply a specific prompt using the selected model and provider, incorporating user knowledge"""
    try:
        prompt_parts = prompt_content.split('## Prompt')
        if len(prompt_parts) > 1:
            prompt_text = prompt_parts[1].strip()
        else:
            prompt_text = prompt_content

        # Include knowledge base context if available
        system_prompt = prompt_text
        if user_knowledge:
            knowledge_context = "\n\n".join([
                f"## {name}\n{content}" 
                for name, content in user_knowledge.items()
            ])
            system_prompt = f"""Use the following knowledge base to inform your analysis and match the user's style and perspective:

{knowledge_context}

When analyzing the content, please incorporate these perspectives and style guidelines.

Original Prompt:
{prompt_text}"""

        if provider == "OpenAI":
            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{text}"}
                ],
                max_tokens=1500
            )
            return response.choices[0].message.content

        elif provider == "Anthropic":
            response = anthropic_client.messages.create(
                model=model,
                max_tokens=1500,
                system=system_prompt,
                messages=[
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{text}"}
                ]
            )
            return response.content[0].text

        elif provider == "Grok":
            # Grok API endpoint (you'll need to adjust this based on actual Grok API documentation)
            headers = {
                "Authorization": f"Bearer {GROK_API_KEY}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"Here's the transcription to analyze:\n\n{text}"}
                ]
            }
            response = requests.post(
                "https://api.grok.x.ai/v1/chat/completions",  # Adjust URL as needed
                headers=headers,
                json=payload
            )
            return response.json()["choices"][0]["message"]["content"]

    except Exception as e:
        st.error(f"Analysis error with {provider} {model}: {str(e)}")
        return None

def chunk_audio(audio_path, target_size_mb=25):
    """Split audio file into chunks of approximately target_size_mb"""
    try:
        # Log the start of the chunking process
        logger.debug(f"Starting to chunk audio file: {audio_path}")
        logger.debug(f"Target chunk size: {target_size_mb}MB")
        
        # Create temporary directory for chunks
        temp_dir = tempfile.mkdtemp()
        logger.debug(f"Created temporary directory for chunks: {temp_dir}")
        
        # Load the audio file
        try:
            audio = AudioSegment.from_file(audio_path)
            logger.debug(f"Successfully loaded audio file. Duration: {len(audio)}ms")
        except Exception as load_error:
            logger.error(f"Failed to load audio file: {str(load_error)}")
            st.error(f"Error loading audio file: {str(load_error)}")
            return [], None
            
        # Get file size and adjust chunk size for very large files
        file_size_mb = os.path.getsize(audio_path) / (1024 * 1024)
        chunks = []
        
        # Adjust strategy based on file size
        if file_size_mb > 100:  # For very large files
            # Use silence detection for more natural chunking
            logger.debug(f"Large file detected ({file_size_mb:.2f} MB). Using silence-based chunking.")
            
            # Detect silences in the audio
            try:
                silence_thresh = -40  # dB
                min_silence_len = 700  # ms
                
                # Get silence ranges
                silence_ranges = silence.detect_silence(
                    audio, 
                    min_silence_len=min_silence_len, 
                    silence_thresh=silence_thresh
                )
                
                # Convert silence ranges to chunk points
                chunk_points = [0]  # Start with the beginning of the audio
                
                for start, end in silence_ranges:
                    # Use the middle of each silence as a potential split point
                    chunk_points.append((start + end) // 2)
                
                # Add the end of the audio
                chunk_points.append(len(audio))
                
                # Ensure we don't create too many tiny chunks for very large files
                # Filter points to create chunks of roughly the target size
                target_chunk_len_ms = target_size_mb * 5 * 60 * 1000 / file_size_mb  # Scale based on file size
                
                filtered_points = [chunk_points[0]]  # Always keep the first point
                current_pos = chunk_points[0]
                
                for point in chunk_points[1:]:
                    if point - current_pos >= target_chunk_len_ms or point == chunk_points[-1]:
                        filtered_points.append(point)
                        current_pos = point
                
                logger.debug(f"Created {len(filtered_points)-1} chunk boundaries using silence detection")
                chunk_points = filtered_points
                
                # Create progress bar
                progress_bar = st.progress(0)
                
                # Process each chunk
                for i in range(len(chunk_points) - 1):
                    start = chunk_points[i]
                    end = chunk_points[i+1]
                    
                    # Skip if segment is too short (less than 1 second)
                    if end - start < 1000:
                        logger.debug(f"Skipping segment {i+1} (too short: {end-start}ms)")
                        continue
                    
                    try:
                        chunk = audio[start:end]
                        chunk_path = os.path.join(temp_dir, f'chunk_{i}.mp3')
                        
                        # Export with specific parameters that work well with OpenAI's API
                        chunk.export(
                            chunk_path, 
                            format='mp3',
                            parameters=["-ac", "1", "-ar", "16000"]  # Mono, 16kHz
                        )
                        
                        # Verify the exported file exists and has content
                        if os.path.exists(chunk_path) and os.path.getsize(chunk_path) > 0:
                            chunks.append(chunk_path)
                            logger.debug(f"Created chunk {i+1}: {chunk_path} (Duration: {len(chunk)}ms)")
                        else:
                            logger.warning(f"Failed to create chunk {i+1}: File is empty or doesn't exist")
                    except Exception as chunk_error:
                        logger.error(f"Error creating chunk {i+1}: {str(chunk_error)}")
                    
                    # Update progress
                    progress = (i + 1) / (len(chunk_points) - 1)
                    progress_bar.progress(progress)
                
                # Clear progress bar
                progress_bar.empty()
                
            except Exception as silence_error:
                logger.error(f"Error in silence detection: {str(silence_error)}")
                # Fall back to simple chunking if silence detection fails
                st.warning("Silence detection failed, falling back to uniform chunking")
        
        # Either silence detection failed or it's a smaller file, use simple chunking
        if not chunks:
            logger.debug("Using uniform chunking method")
            
            # Calculate chunk size based on target MB
            target_chunk_bytes = target_size_mb * 1024 * 1024
            bytes_per_ms = file_size_mb * 1024 * 1024 / len(audio)
            chunk_length_ms = int(target_chunk_bytes / bytes_per_ms)
            
            # Ensure chunk length is reasonable
            if chunk_length_ms < 5000:  # 5 seconds minimum
                chunk_length_ms = 5000
            elif chunk_length_ms > 300000:  # 5 minutes maximum
                chunk_length_ms = 300000
                
            logger.debug(f"Uniform chunk length: {chunk_length_ms}ms")
            
            # Create progress bar
            progress_bar = st.progress(0)
            
            # Create chunks of uniform size
            chunk_count = 0
            for i in range(0, len(audio), chunk_length_ms):
                # Skip if less than 1 second is remaining
                if i + 1000 > len(audio):
                    logger.debug(f"Skipping final segment (too short: {len(audio) - i}ms)")
                    continue
                
                try:
                    # Extract chunk
                    chunk = audio[i:min(i + chunk_length_ms, len(audio))]
                    
                    # Save chunk with index in filename
                    chunk_path = os.path.join(temp_dir, f'chunk_{chunk_count}.mp3')
                    
                    # Export with specific parameters for OpenAI
                    chunk.export(
                        chunk_path, 
                        format='mp3',
                        parameters=["-ac", "1", "-ar", "16000"]  # Mono, 16kHz
                    )
                    
                    # Verify the exported file exists and has content
                    if os.path.exists(chunk_path) and os.path.getsize(chunk_path) > 0:
                        chunks.append(chunk_path)
                        chunk_count += 1
                        logger.debug(f"Created chunk {chunk_count}: {chunk_path} (Duration: {len(chunk)}ms)")
                    else:
                        logger.warning(f"Failed to create chunk at position {i}ms: File is empty or doesn't exist")
                except Exception as chunk_error:
                    logger.error(f"Error creating chunk at position {i}ms: {str(chunk_error)}")
                
                # Update progress
                progress = (i + chunk_length_ms) / len(audio)
                progress_bar.progress(min(progress, 1.0))
            
            # Clear progress bar
            progress_bar.empty()
        
        # Check if any chunks were created
        if not chunks:
            logger.error("Failed to create any valid chunks from the audio file")
            st.error("Failed to process the audio file into chunks.")
            return [], None
            
        logger.debug(f"Successfully created {len(chunks)} chunks from audio file")
        return chunks, temp_dir
        
    except Exception as e:
        logger.error(f"Error in chunk_audio: {str(e)}", exc_info=True)
        st.error(f"Error chunking audio: {str(e)}")
        return [], None

def transcribe_chunk(chunk_path, i, total_chunks):
    """Transcribe a single audio chunk using OpenAI's API"""
    try:
        # Log the processing of this chunk
        logger.debug(f"Processing chunk {i+1}/{total_chunks} ({os.path.getsize(chunk_path)/1024:.1f}KB): {chunk_path}")
        
        # Get API key
        api_key = get_api_key_for_service("openai")
        if not api_key:
            error_msg = "OpenAI API key is not configured"
            logger.error(error_msg)
            return f"[Error: {error_msg}]"
        
        # Check if file exists
        if not os.path.exists(chunk_path):
            error_msg = f"Chunk file not found: {chunk_path}"
            logger.error(error_msg)
            return f"[Error: {error_msg}]"
        
        # Check if file size is valid
        file_size = os.path.getsize(chunk_path)
        if file_size == 0:
            error_msg = f"Chunk file is empty: {chunk_path}"
            logger.error(error_msg)
            return f"[Error: {error_msg}]"
        
        # Try direct API call
        try:
            logger.debug(f"Making direct API call for chunk {i+1}")
            
            import requests
            
            headers = {
                "Authorization": f"Bearer {api_key}"
            }
            
            url = "https://api.openai.com/v1/audio/transcriptions"
            
            # Set transcription options
            model = st.session_state.get('transcription_model', 'whisper-1')
            
            # Create form data
            files = {
                'file': open(chunk_path, 'rb')
            }
            
            data = {
                'model': model,
                'response_format': 'text'
            }
            
            # Check for language code in session state
            if st.session_state.get('language_code') and st.session_state.get('language_code') != 'auto':
                data['language'] = st.session_state.get('language_code')
                logger.debug(f"Setting language for chunk {i+1} to: {data['language']}")
            
            # Make the API request
            response = requests.post(url, headers=headers, files=files, data=data)
            
            # Handle different response codes
            if response.status_code == 200:
                transcript = response.text
                logger.debug(f"Successfully transcribed chunk {i+1} (Length: {len(transcript)} chars)")
                return transcript
                
            elif response.status_code == 429:
                error_msg = f"Rate limit exceeded for chunk {i+1}"
                logger.error(f"API Rate Limit (429): {error_msg}")
                return f"[Rate limit exceeded: Try again later for chunk {i+1}]"
                
            elif response.status_code == 401:
                error_msg = f"Invalid API key when processing chunk {i+1}"
                logger.error(f"API Authentication Error (401): {error_msg}")
                return f"[Failed: Invalid API key for chunk {i+1}]"
                
            else:
                # Try to parse error details
                try:
                    error_data = response.json()
                    error_msg = error_data.get('error', {}).get('message', f"Unknown API error for chunk {i+1}")
                except:
                    error_msg = f"API error (status {response.status_code}) for chunk {i+1}: {response.text}"
                
                logger.error(f"API Error in chunk {i+1}: {error_msg}")
                return f"[Error: {error_msg}]"
                
        except requests.exceptions.RequestException as req_error:
            # Handle connection errors
            error_msg = f"API request failed for chunk {i+1}: {str(req_error)}"
            logger.error(error_msg)
            
            # Try OpenAI client as fallback
            try:
                logger.debug(f"Attempting fallback with client library for chunk {i+1}")
                
                from openai import OpenAI
                
                # Create client
                client = OpenAI(api_key=api_key)
                
                # Set options
                options = {}
                if st.session_state.get('language_code') and st.session_state.get('language_code') != 'auto':
                    options['language'] = st.session_state.get('language_code')
                
                # Get model preference or use default
                model = st.session_state.get('transcription_model', 'whisper-1')
                
                with open(chunk_path, "rb") as audio_file:
                    # Use client library as fallback
                    response = client.audio.transcriptions.create(
                        model=model,
                        file=audio_file,
                        response_format="text",
                        **options
                    )
                
                # If we get here, the fallback worked
                transcript = response
                logger.debug(f"Fallback succeeded for chunk {i+1} (Length: {len(transcript)} chars)")
                return transcript
                
            except Exception as client_error:
                error_msg = f"Fallback also failed for chunk {i+1}: {str(client_error)}"
                logger.error(error_msg)
                return f"[Failed: {error_msg}]"
    
    except Exception as e:
        error_msg = f"Unexpected error processing chunk {i+1}: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return f"[Error: {error_msg}]"

def generate_title(transcript):
    """Generate a descriptive 5-7 word title based on the transcript"""
    try:
        openai_client = get_openai_client()
        if not openai_client:
            return "Untitled Audio Transcription"
            
        prompt = f"""Create a clear, descriptive title (5-7 words) that captures the main topic of this transcript:
        Transcript: {transcript[:1000]}...
        
        Return only the title, no quotes or additional text."""
        
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant that creates concise, descriptive titles."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=50,
            temperature=0.3
        )
        
        return response.choices[0].message.content.strip()
    except Exception as e:
        return "Audio Transcription"

def generate_summary(transcript):
    """Generate a one-sentence summary of the audio content"""
    try:
        openai_client = get_openai_client()
        if not openai_client:
            return "Summary of audio content"
            
        prompt = f"""Create a single, insightful sentence that summarizes the key message or main insight from this transcript:
        Transcript: {transcript[:1000]}...
        
        Return only the summary sentence, no additional text."""
        
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant that creates concise, insightful summaries."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100,
            temperature=0.3
        )
        
        return response.choices[0].message.content.strip()
    except Exception as e:
        return "Summary of audio content"

def generate_short_title(text):
    """Generate a descriptive title from the transcript using Claude 3.7 Sonnet"""
    try:
        # Use Anthropic Claude 3.7 Sonnet for generating title
        api_key = get_api_key_for_service("anthropic")
        if not api_key:
            return "Untitled Audio Transcription"
        
        # Create a better prompt for title generation
        prompt = f"""Create a descriptive, specific title (5-8 words) that accurately captures the core topic or theme of this content. 
        The title should be informative and specific enough that someone reading it would immediately understand what the content is about.
        
        Content sample:
        {text[:2000]}...
        
        Return only the title, no quotes, asterisks, or additional text. The title should be engaging but primarily informative and descriptive.
        """
        
        # Use direct API call to Claude
        result = direct_anthropic_completion(prompt, api_key, model="claude-3-7-sonnet-20250219")
        
        if result and not result.startswith("Error"):
            # Clean the title
            title = result.strip().rstrip('.').strip('"').strip("'")
            return title
        else:
            return "Untitled Audio Transcription"
    except Exception as e:
        logger.exception("Error generating title:")
        return "Untitled Audio Transcription"

def chunk_text_for_notion(text, chunk_size=1900):
    """Split text into chunks that respect Notion's character limit"""
    if not text:
        return []
    return [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]

def create_content_notion_entry(title, transcript, wisdom=None, outline=None, social_content=None, image_prompts=None, article=None):
    """Create a new entry in the Notion database with all content sections"""
    try:
        # Get Notion client and database ID
        notion_client = get_notion_client()
        if not notion_client:
            st.error("Notion API key is not configured. Please add your API key in the settings.")
            return False
            
        NOTION_DATABASE_ID = get_notion_database_id()
        if not NOTION_DATABASE_ID:
            st.error("Notion Database ID is not configured. Please add it in the settings.")
            return False
        
        # Initialize audio_filename at the beginning of the function
        audio_filename = "None"
        if hasattr(st.session_state, 'audio_file') and st.session_state.audio_file:
            audio_filename = st.session_state.audio_file.name
        
        # Generate AI title if none provided
        if not title or title.startswith("Transcription -") or title.startswith("Content -"):
            ai_title = generate_short_title(transcript)
            title = f"WHISPER: {ai_title}"
        
        # Generate tags for the content
        content_tags = generate_content_tags(transcript, wisdom)
        
        # Generate summary
        summary = generate_summary(transcript)
        
        # Track model usage for metadata
        used_models = []
        if hasattr(st.session_state, 'ai_provider') and hasattr(st.session_state, 'ai_model'):
            if st.session_state.ai_provider and st.session_state.ai_model:
                used_models.append(f"{st.session_state.ai_provider} {st.session_state.ai_model}")
        if transcript:  # If we have a transcript, we likely used Whisper
            used_models.append("OpenAI Whisper-1")
            
        # Estimate token usage
        total_tokens = estimate_token_usage(transcript, wisdom, outline, social_content, image_prompts, article)
        
        # Format content with toggles
        content = []
        
        # Add summary section with AI-generated summary
        content.extend([
            {
                "type": "callout",
                "callout": {
                    "rich_text": [{"type": "text", "text": {"content": summary}}],
                    "color": "purple_background",
                    "icon": {
                        "type": "emoji",
                        "emoji": "üíú"
                    }
                }
            },
            {
                "type": "divider",
                "divider": {}
            }
        ])
        
        # Add Transcript section with chunked content and color
        content.extend([
            {
                "type": "toggle",
                "toggle": {
                    "rich_text": [{"type": "text", "text": {"content": "Transcription"}}],
                    "color": "default", # dark gray/black
                    "children": [
                        {
                            "type": "paragraph",
                            "paragraph": {
                                "rich_text": [{"type": "text", "text": {"content": chunk}}]
                            }
                        } for chunk in chunk_text_for_notion(transcript)
                    ]
                }
            }
        ])

        # Add Wisdom section if available
        if wisdom:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Wisdom"}}],
                        "color": "brown_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(wisdom)
                        ]
                    }
                }
            ])

        # Add Socials section with golden brown background
        if social_content:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Socials"}}],
                        "color": "orange_background", # closest to golden brown
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(social_content)
                        ]
                    }
                }
            ])

        # Add Image Prompts with green background
        if image_prompts:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Image Prompts"}}],
                        "color": "green_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(image_prompts)
                        ]
                    }
                }
            ])

        # Add Outline with blue background
        if outline:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Outline"}}],
                        "color": "blue_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(outline)
                        ]
                    }
                }
            ])

        # Add Draft Post with purple background
        if article:
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Draft Post"}}],
                        "color": "purple_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                                }
                            } for chunk in chunk_text_for_notion(article)
                        ]
                    }
                }
            ])

        # Add Original Audio section with maroon/red background if audio file exists
        if audio_filename != "None":
            content.extend([
                {
                    "type": "toggle",
                    "toggle": {
                        "rich_text": [{"type": "text", "text": {"content": "Original Audio"}}],
                        "color": "red_background",
                        "children": [
                            {
                                "type": "paragraph",
                                "paragraph": {
                                    "rich_text": [{"type": "text", "text": {"content": audio_filename}}]
                                }
                            }
                        ]
                    }
                }
            ])

        # Add metadata section
            content.extend([
                {
                    "type": "divider",
                    "divider": {}
                },
                {
                    "type": "heading_2",
                    "heading_2": {
                    "rich_text": [{"type": "text", "text": {"content": "Metadata"}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Original Audio:** {audio_filename}"}}]
                }
            },
                            {
                                "type": "paragraph",
                                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Created:** {datetime.now().strftime('%Y-%m-%d %H:%M')}"}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Models Used:** {', '.join(used_models) if used_models else 'None'}"}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Estimated Tokens:** {total_tokens:,}"}}]
                    }
                }
            ])

        # Create the page in Notion
        response = notion_client.pages.create(
            parent={"database_id": NOTION_DATABASE_ID},
            properties={
                "Name": {"title": [{"text": {"content": title}}]},
                "Tags": {"multi_select": [{"name": tag} for tag in content_tags]},
            },
            children=content
        )
        
        # Make the Notion link clickable in the UI
        if response and isinstance(response, dict) and 'id' in response:
            page_id = response['id']
            page_url = f"https://notion.so/{page_id.replace('-', '')}"
            st.success(f"Successfully saved to Notion!")
            st.markdown(f"[Open in Notion]({page_url})")
            return page_url
        else:
            st.error("Notion API returned an invalid response")
            st.write("Response:", response)  # Debug info
            return False
            
    except Exception as e:
        st.error(f"Detailed error creating Notion entry: {str(e)}")
        return False

def estimate_token_usage(transcript, wisdom=None, outline=None, social_content=None, image_prompts=None, article=None):
    """Estimate token usage for all content generated"""
    # Approximate token count (roughly 4 chars per token for English)
    token_count = 0
    
    # Count tokens in all content
    if transcript:
        token_count += len(transcript) / 4
    if wisdom:
        token_count += len(wisdom) / 4
    if outline:
        token_count += len(outline) / 4
    if social_content:
        token_count += len(social_content) / 4
    if image_prompts:
        token_count += len(image_prompts) / 4
    if article:
        token_count += len(article) / 4
        
    # Add approximate prompt tokens and overhead
    token_count += 1000  # For system prompts, etc.
    
    return int(token_count)

def generate_content_tags(transcript, wisdom=None):
    """Generate relevant tags based on content"""
    try:
        # Use Anthropic Claude 3.7 Sonnet for generating tags
        api_key = get_api_key_for_service("anthropic")
        if not api_key:
            return ["audio", "transcription", "content", "notes", "whisperforge"]
            
        # Create prompt for tag generation
        content_sample = transcript[:1000] if transcript else ""
        wisdom_sample = wisdom[:500] if wisdom else ""
        
        prompt = f"""Based on the following content, generate 5-7 descriptive, specific tags that accurately capture the main topics, themes, and concepts. 
        Each tag can be 1-3 words and should be specific enough to categorize the content effectively.

        Content sample:
        {content_sample}

        Key insights:
        {wisdom_sample}

        Return only the tags, separated by commas, with each tag being 1-3 words. Make them descriptive and specific to this content.
        For example, instead of just 'technology', use 'AI ethics' or 'blockchain adoption'.
        """
        
        # Use direct API call to Claude
        result = direct_anthropic_completion(prompt, api_key, model="claude-3-7-sonnet-20250219")
        
        if result and not result.startswith("Error"):
            # Split the response into individual tags and clean them
            tags = [tag.strip() for tag in result.split(',') if tag.strip()]
            
            # Ensure we have at least 3 tags but no more than 7
            while len(tags) < 3:
                tags.append("whisperforge content")
            
            return tags[:7]
        else:
            return ["audio content", "transcription", "whisperforge", "ai generated", "content notes"]
    except Exception as e:
        logger.exception("Error generating content tags:")
        # Return default tags if there's an error
        return ["audio", "transcription", "content", "notes", "whisperforge"]

def get_available_openai_models():
    """Get current list of available OpenAI models"""
    try:
        openai_client = get_openai_client()
        if not openai_client:
            st.error("OpenAI API key is not configured.")
            return {}

        models = openai_client.models.list()
        gpt_models = {
            model.id: model.id for model in models 
            if any(x in model.id for x in ['gpt-4', 'gpt-3.5'])
        }
        return gpt_models
    except Exception as e:
        st.error(f"Error fetching OpenAI models: {str(e)}")
        return {}

def get_available_anthropic_models():
    """Get current list of available Anthropic models"""
    # Current as of May 2024
    return {
        "Claude 3.7 Sonnet": "claude-3-7-sonnet-20250219",
        "Claude 3 Opus": "claude-3-opus-20240229",
        "Claude 3 Sonnet": "claude-3-sonnet-20240229", 
        "Claude 3 Haiku": "claude-3-haiku-20240307",
    }

def get_available_grok_models():
    """Get current list of available Grok models"""
    # Current as of March 2024
    return {
        "Grok-1": "grok-1",
    }

# Update the LLM_MODELS dictionary dynamically
def get_current_models():
    return {
        "OpenAI": get_available_openai_models(),
        "Anthropic": get_available_anthropic_models(),
        "Grok": get_available_grok_models(),
    }

# Add this function to get available users
def get_available_users():
    """Simple function returning a default user for backward compatibility"""
    return ["Default"]
    
def generate_wisdom(transcript, ai_provider, model, custom_prompt=None, knowledge_base=None):
    """Extract key insights from the transcript"""
    try:
        # Use the custom prompt if provided, otherwise get from prompts
        prompt = custom_prompt or get_prompt("wisdom_extraction", st.session_state.prompts, DEFAULT_PROMPTS)
        
        # Use the provider to apply the prompt
        # ... rest of function ...
        return "Wisdom extraction placeholder"
    except Exception as e:
        st.error(f"Error extracting wisdom: {str(e)}")
        return None

def transcribe_audio(audio_file):
    """Transcribe an audio file using the appropriate method based on file size"""
    try:
        if audio_file is None:
            logger.warning("No audio file provided for transcription")
            return ""
        
        # Save the uploaded file to a temporary location
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(audio_file.name)[1]) as tmp_file:
            tmp_file.write(audio_file.getbuffer())
            temp_path = tmp_file.name
        
        logger.info(f"Processing audio file: {audio_file.name} (Size: {audio_file.size/1024/1024:.2f} MB)")
        
        try:
            # Check if file is valid audio
            try:
                audio_info = sf.info(temp_path)
                logger.info(f"Audio file details: {audio_file.name}, Duration: {audio_info.duration:.2f}s, "
                           f"Sample rate: {audio_info.samplerate}Hz, Channels: {audio_info.channels}")
                
                # Add file details to the UI
                st.write(f"üìä **File details**: Duration: {audio_info.duration:.2f}s, "
                        f"Sample rate: {audio_info.samplerate}Hz, Channels: {audio_info.channels}")
            except Exception as audio_error:
                logger.warning(f"Could not read audio details: {str(audio_error)}")
                st.warning("‚ö†Ô∏è Could not read detailed audio information from file")
            
            # Determine processing method based on file size
            file_size_mb = os.path.getsize(temp_path) / (1024 * 1024)
            
            # Decision logic for transcription method
            if file_size_mb > 25:  # Large file threshold
                logger.info(f"Large file detected ({file_size_mb:.2f} MB), using chunked processing")
                st.info(f"üîÑ Large audio file detected ({file_size_mb:.2f} MB), processing in chunks for reliability...")
                transcript = transcribe_large_file(temp_path)
            else:
                logger.info(f"Standard file size ({file_size_mb:.2f} MB), using direct transcription")
                st.info(f"üîÑ Processing audio file ({file_size_mb:.2f} MB)...")
                transcript = transcribe_with_whisper(temp_path)
        
            # Clean up the temporary file
            try:
                os.unlink(temp_path)
                logger.debug(f"Removed temporary file: {temp_path}")
            except Exception as cleanup_error:
                logger.warning(f"Failed to remove temporary file: {str(cleanup_error)}")
            
            return transcript
        
        except Exception as process_error:
            # Clean up on error
            try:
                os.unlink(temp_path)
            except:
                pass
            
            # Re-raise for outer exception handler
            raise process_error
        
    except Exception as e:
        error_msg = f"Error processing audio file: {str(e)}"
        logger.error(error_msg, exc_info=True)
        
        # Provide more specific error messages based on error type
        if "ffmpeg" in str(e).lower():
            st.error("‚ùå FFmpeg error. Please ensure FFmpeg is properly installed on your system.")
        elif "memory" in str(e).lower():
            st.error("‚ùå Memory error. File may be too large for processing with current system resources.")
        elif "format" in str(e).lower() or "invalid" in str(e).lower():
            st.error("‚ùå Invalid audio format. Please upload a supported audio file type.")
        elif "api" in str(e).lower() or "key" in str(e).lower():
            st.error("‚ùå API error. Please check your OpenAI API key configuration.")
        else:
            st.error(f"‚ùå Error processing audio: {str(e)}")
        
        return ""

def main():
    # Initialize session state variables
    if 'user_id' not in st.session_state:
        st.session_state.user_id = 1  # Set to admin user ID
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = True  # Auto-authenticate for testing
    if 'page' not in st.session_state:
        st.session_state.page = "home"
    if 'show_cookie_banner' not in st.session_state:
        st.session_state.show_cookie_banner = True
    if 'transcription' not in st.session_state:
        st.session_state.transcription = ""
    if 'wisdom' not in st.session_state:
        st.session_state.wisdom = ""
    if 'audio_file' not in st.session_state:
        st.session_state.audio_file = None
    if 'ai_provider' not in st.session_state:
        st.session_state.ai_provider = "Anthropic"
    if 'ai_model' not in st.session_state:
        # Set default model to Claude 3.7 Sonnet
        st.session_state.ai_model = "claude-3-7-sonnet-20250219"
    if 'transcription_provider' not in st.session_state:
        st.session_state.transcription_provider = "OpenAI"
    if 'transcription_model' not in st.session_state:
        st.session_state.transcription_model = "whisper-1"
    if 'content_title_value' not in st.session_state:
        st.session_state.content_title_value = ""
    
    # Load prompts (new simplified version)
    st.session_state.prompts = load_prompts()
    
    # Load knowledge base
    st.session_state.knowledge_base = load_knowledge_base()
    
    # Check for URL query parameters
    if "page" in st.query_params:
        st.session_state.page = st.query_params["page"]
    
    # Apply production CSS enhancements
    add_production_css()
    
    # Initialize database and create admin user if needed
    init_db()
    init_admin_user()
    
    # Apply the improved cyberpunk theme
    local_css()
    
    # Load JavaScript files
    load_js()
    
    # Skip authentication for testing purposes
    # Authentication handling
    # if not st.session_state.authenticated:
    #     show_login_page()
    #     return
    
    # Create a custom header with the refined styling and navigation
    create_custom_header()
    
    # Sidebar configuration with reduced items
    with st.sidebar:
        st.markdown('<div class="section-header">Configuration</div>', unsafe_allow_html=True)
        
        # Account section with logout
        show_account_sidebar()
        
        # User Profile selection
        st.markdown("### User Profile")
        selected_user = st.selectbox("Select Profile", options=get_available_users(), key="user_profile_sidebar")
        
        # Footer links
        st.markdown("---")
        st.markdown("### About")
        if st.button("Terms & Privacy"):
            st.session_state.page = "legal"
            st.rerun()
        st.markdown("[Website](https://whisperforge.ai)")
        st.markdown("[Support](mailto:support@whisperforge.ai)")
        
        # Version info
        st.markdown("---")
        st.markdown("WhisperForge v1.0.0")
    
    # Show different pages based on selection
    if st.session_state.page == "home":
        show_main_page()
    elif st.session_state.page == "api":
        show_api_keys_page()
    elif st.session_state.page == "usage":
        show_usage_page()
    elif st.session_state.page == "admin":
        show_admin_page()
    elif st.session_state.page == "legal":
        show_legal_page()
    elif st.session_state.page == "user_config":
        show_user_config_page()
    else:
        show_main_page()
    
    # Show cookie consent banner
    show_cookie_banner()
    
    # Display tool area if transcript is available
    if st.session_state.get("transcript"):
        with st.expander("üõ†Ô∏è Tools", expanded=True):
            col1, col2, col3 = st.columns(3)
            
            # First column - transcript actions
            with col1:
                st.subheader("Transcript")
                if st.button("üìù Copy Transcript"):
                    st.session_state.clipboard = st.session_state.transcript
                    st.toast("Transcript copied to clipboard")
                
                if st.button("üíæ Save Transcript"):
                    st.session_state.file_to_save = "transcript.txt"
                    st.session_state.content_to_save = st.session_state.transcript
                    st.toast("Preparing transcript for download...")
            
            # Second column - wisdom actions
            with col2:
                st.subheader("Wisdom")
                
                if st.session_state.get("wisdom"):
                    if st.button("üìù Copy Wisdom"):
                        st.session_state.clipboard = st.session_state.wisdom
                        st.toast("Wisdom copied to clipboard")
                    
                    if st.button("üíæ Save Wisdom"):
                        st.session_state.file_to_save = "wisdom.txt"
                        st.session_state.content_to_save = st.session_state.wisdom
                        st.toast("Preparing wisdom for download...")
            
            # Third column - outline actions
            with col3:
                st.subheader("Outline")
                
                if st.session_state.get("outline"):
                    if st.button("üìù Copy Outline"):
                        st.session_state.clipboard = st.session_state.outline
                        st.toast("Outline copied to clipboard")
                    
                    if st.button("üíæ Save Outline"):
                        st.session_state.file_to_save = "outline.txt"
                        st.session_state.content_to_save = st.session_state.outline
                        st.toast("Preparing outline for download...")
    
    # ... existing code ...

def show_main_page():
    # This function contains the original main app functionality
    
    # Get user's API keys
    api_keys = get_user_api_keys()
    
    # Check if API keys are set up
    openai_key = api_keys.get("openai")
    anthropic_key = api_keys.get("anthropic")
    notion_key = api_keys.get("notion")
    
    if not openai_key:
        st.warning("‚ö†Ô∏è Your OpenAI API key is not set up. Some features may not work properly. [Set up your API keys](?page=api)")
    
    if not anthropic_key:
        st.warning("‚ö†Ô∏è Your Anthropic API key is not set up. Some features may not work properly. [Set up your API keys](?page=api)")
    
    # Use the global knowledge base
    knowledge_base = st.session_state.knowledge_base
    
    # Display the current models being used
    st.info(f"Using {st.session_state.transcription_provider} {st.session_state.transcription_model} for transcription and {st.session_state.ai_provider} {st.session_state.ai_model} for content processing. Model settings can be changed in the Admin panel.")
    
    # Add tabs for input selection
    input_tabs = st.tabs(["Audio Upload", "Text Input"])
    
    # Tab 1: Audio Upload
    with input_tabs[0]:
        st.markdown('<div class="section-header">Audio Transcription</div>', unsafe_allow_html=True)
        
        # Update the file uploader with clear message about 500MB limit
        uploaded_file = st.file_uploader(
            "Upload your audio file", 
            type=['mp3', 'wav', 'ogg', 'm4a'],
            key="audio_uploader",
            help="Files up to 500MB are supported. Large files will be automatically chunked for parallel processing."
        )
        
        # Transcribe Button
        if uploaded_file is not None:
            if st.button("üéôÔ∏è Transcribe Audio", key="transcribe_button", use_container_width=True):
                with st.spinner("Transcribing your audio..."):
                    transcription = transcribe_audio(uploaded_file)
                    if transcription:
                        st.session_state.transcription = transcription
                        st.session_state.audio_file = uploaded_file
        
                        # Automatically run the complete content generation pipeline
                        st.info("‚ú® Transcription complete! Now generating content...")
                        
                        with st.status("Processing complete content pipeline...") as status:
                            # 1. Generate wisdom
                            status.update(label="Step 1/6: Extracting wisdom...", state="running")
                            wisdom = generate_wisdom(
                                st.session_state.transcription, 
                                st.session_state.ai_provider,
                                st.session_state.ai_model,
                                knowledge_base=knowledge_base
                            )
                            
                            if not wisdom:
                                status.update(label="‚ùå Content generation failed at wisdom extraction step", state="error")
                                return
                                
                            st.session_state.wisdom = wisdom
                            
                            # 2. Generate outline
                            status.update(label="Step 2/6: Creating outline...", state="running")
                            outline = generate_outline(
                                st.session_state.transcription,
                                st.session_state.wisdom,
                                st.session_state.ai_provider,
                                st.session_state.ai_model,
                                knowledge_base=knowledge_base
                            )
                            
                            if not outline:
                                status.update(label="‚ùå Content generation failed at outline creation step", state="error")
                                return
                                
                            st.session_state.outline = outline
                            
                            # 3. Generate social content
                            status.update(label="Step 3/6: Creating social media content...", state="running")
                            social = generate_social_content(
                                st.session_state.wisdom,
                                st.session_state.outline,
                                st.session_state.ai_provider,
                                st.session_state.ai_model,
                                knowledge_base=knowledge_base
                            )
                            
                            if not social:
                                status.update(label="‚ùå Content generation failed at social content step", state="error")
                                return
                                
                            st.session_state.social = social
                            
                            # 4. Generate image prompts
                            status.update(label="Step 4/6: Creating image prompts...", state="running")
                            image_prompts = generate_image_prompts(
                                st.session_state.wisdom,
                                st.session_state.outline,
                                st.session_state.ai_provider,
                                st.session_state.ai_model,
                                knowledge_base=knowledge_base
                            )
                            
                            if not image_prompts:
                                status.update(label="‚ùå Content generation failed at image prompts step", state="error")
                                return
                                
                            st.session_state.image_prompts = image_prompts
                            
                            # 5. Generate article
                            status.update(label="Step 5/6: Writing full article...", state="running")
                            article = generate_article(
                                st.session_state.transcription,
                                st.session_state.wisdom,
                                st.session_state.outline,
                                st.session_state.ai_provider,
                                st.session_state.ai_model,
                                knowledge_base=knowledge_base
                            )
                            
                            if not article:
                                status.update(label="‚ùå Content generation failed at article generation step", state="error")
                                return
                                
                            st.session_state.article = article
                            
                            # 6. Save to Notion
                            status.update(label="Step 6/6: Saving to Notion...", state="running")
                            notion_key = api_keys.get("notion") or os.getenv("NOTION_API_KEY")
                            notion_db = api_keys.get("notion_database_id") or os.getenv("NOTION_DATABASE_ID")
                            
                            if notion_key and notion_db:
                                try:
                                    # Generate AI title
                                    title_to_use = generate_short_title(st.session_state.transcription)
                            
                                    # Save to Notion
                                    result = create_content_notion_entry(
                                        title_to_use,
                                        st.session_state.transcription,
                                                        wisdom=st.session_state.wisdom,
                                                        outline=st.session_state.outline,
                                                        social_content=st.session_state.social,
                                                        image_prompts=st.session_state.image_prompts,
                                                        article=st.session_state.article
                                    )
                                    
                                    if result:
                                        status.update(label="‚úÖ Complete content pipeline processed and saved to Notion!", state="complete")
                                    else:
                                        status.update(label="‚úÖ Content generated but Notion save failed", state="error")
                                except Exception as e:
                                    logger.exception("Error saving to Notion:")
                                    status.update(label=f"‚úÖ Content generated but Notion save failed: {str(e)}", state="error")
                            else:
                                status.update(label="‚úÖ Content generated! Notion integration not configured.", state="complete")
        
        # Display transcription result if available
        if st.session_state.transcription:
            st.markdown("### Transcription Result")
            st.text_area("Transcript", st.session_state.transcription, height=200, key="transcript_display")
            
            # Content generation section
            st.markdown('<div class="section-header">Content Generation</div>', unsafe_allow_html=True)
            
            # Show content generation options
            st.markdown("### Content Generation")
            
            # Wisdom extraction
            wisdom_expander = st.expander("üìù Extract Wisdom", expanded=True)
                with wisdom_expander:
                    if st.button("Generate Wisdom", key="wisdom_button", use_container_width=True):
                        with st.spinner("Extracting key insights..."):
                            wisdom = generate_wisdom(
                                st.session_state.transcription, 
                                st.session_state.ai_provider,
                                st.session_state.ai_model,
                                knowledge_base=knowledge_base
                            )
                            if wisdom:
                                st.session_state.wisdom = wisdom
                    
                    if st.session_state.get("wisdom"):
                        st.markdown("### Extracted Wisdom")
                        st.markdown(st.session_state.wisdom)
                
                # Outline creation
                outline_expander = st.expander("üìã Create Outline", expanded=False)
                with outline_expander:
                    if st.button("Generate Outline", key="outline_button", use_container_width=True):
                        if not st.session_state.get("wisdom"):
                            st.warning("Please extract wisdom first.")
                        else:
                            with st.spinner("Creating outline..."):
                                outline = generate_outline(
                                    st.session_state.transcription,
                                    st.session_state.wisdom,
                                    st.session_state.ai_provider,
                                    st.session_state.ai_model,
                                    knowledge_base=knowledge_base
                                )
                                if outline:
                                    st.session_state.outline = outline
                    
                    if st.session_state.get("outline"):
                        st.markdown("### Content Outline")
                        st.markdown(st.session_state.outline)
                
                # Social media content
                social_expander = st.expander("üì± Social Media Content", expanded=False)
                with social_expander:
                    if st.button("Generate Social Posts", key="social_button", use_container_width=True):
                        if not st.session_state.get("wisdom") or not st.session_state.get("outline"):
                            st.warning("Please extract wisdom and create an outline first.")
                        else:
                            with st.spinner("Creating social media content..."):
                                social = generate_social_content(
                                    st.session_state.wisdom,
                                    st.session_state.outline,
                                    st.session_state.ai_provider,
                                    st.session_state.ai_model,
                                    knowledge_base=knowledge_base
                                )
                                if social:
                                    st.session_state.social = social
                    
                    if st.session_state.get("social"):
                        st.markdown("### Social Media Content")
                        st.markdown(st.session_state.social)
                
                # Image prompts
                image_expander = st.expander("üñºÔ∏è Image Prompts", expanded=False)
                with image_expander:
                    if st.button("Generate Image Prompts", key="image_button", use_container_width=True):
                        if not st.session_state.get("wisdom") or not st.session_state.get("outline"):
                            st.warning("Please extract wisdom and create an outline first.")
                        else:
                            with st.spinner("Creating image prompts..."):
                                prompts = generate_image_prompts(
                                    st.session_state.wisdom,
                                    st.session_state.outline,
                                    st.session_state.ai_provider,
                                    st.session_state.ai_model,
                                    knowledge_base=knowledge_base
                                )
                                if prompts:
                                    st.session_state.image_prompts = prompts
                    
                    if st.session_state.get("image_prompts"):
                        st.markdown("### Image Prompts")
                        st.markdown(st.session_state.image_prompts)
                
                # Full article
                article_expander = st.expander("üìÑ Full Article", expanded=False)
                with article_expander:
                    if st.button("Generate Article", key="article_button", use_container_width=True):
                        if not st.session_state.get("wisdom") or not st.session_state.get("outline"):
                            st.warning("Please extract wisdom and create an outline first.")
                        else:
                            with st.spinner("Writing full article..."):
                                article = generate_article(
                                    st.session_state.transcription,
                                    st.session_state.wisdom,
                                    st.session_state.outline,
                                    st.session_state.ai_provider,
                                    st.session_state.ai_model,
                                    knowledge_base=knowledge_base
                                )
                                if article:
                                    st.session_state.article = article
                    
                    if st.session_state.get("article"):
                        st.markdown("### Generated Article")
                        st.markdown(st.session_state.article)
            
            # Notion export (keeping this outside the tabs)
            st.markdown('<div class="section-header">Export to Notion</div>', unsafe_allow_html=True)
            
            # Check if Notion API key is configured
            notion_key = api_keys.get("notion") or os.getenv("NOTION_API_KEY")
            notion_db = api_keys.get("notion_database_id") or os.getenv("NOTION_DATABASE_ID")
            
            if not notion_key or not notion_db:
                st.warning("‚ö†Ô∏è Notion integration is not configured. Please set up your Notion API key and database ID in Settings.")
            else:
                title = st.session_state.content_title_value or "Untitled Content"
                
                if st.button("üíæ Save to Notion", key="notion_save", use_container_width=True):
                    with st.spinner("Saving to Notion..."):
                        try:
                            # Always generate an AI title for better results
                            if st.session_state.transcription:
                                with st.status("Generating a descriptive title...") as status:
                                    title_to_use = generate_short_title(st.session_state.transcription)
                                    status.update(label=f"Title generated: \"{title_to_use}\"", state="complete")
                            else:
                                title_to_use = "WhisperForge Content"
                            
                            with st.status("Saving to Notion...") as status:
                                result = create_content_notion_entry(
                                    title_to_use,
                                    st.session_state.transcription,
                                    wisdom=st.session_state.get("wisdom"),
                                    outline=st.session_state.get("outline"),
                                    social_content=st.session_state.get("social"),
                                    image_prompts=st.session_state.get("image_prompts"),
                                    article=st.session_state.get("article")
                                )
                                
                                if result:
                                    status.update(label="Successfully saved to Notion!", state="complete")
                                else:
                                    status.update(label="Failed to save to Notion", state="error")
                        except Exception as e:
                            logger.exception("Error saving to Notion:")
                            st.error(f"Error saving to Notion: {str(e)}")
    
    # Tab 2: Text Input
    with input_tabs[1]:
        st.markdown('<div class="section-header">Manual Text Input</div>', unsafe_allow_html=True)
        
        text_input = st.text_area(
            "Enter your text",
            placeholder="Paste your transcript or any text to process...",
            height=300,
            key="manual_text"
        )
        
        if st.button("Use This Text", key="use_text_button", use_container_width=True):
            if text_input:
                st.session_state.transcription = text_input
                st.success("Text loaded for processing!")
                st.rerun()

def show_api_keys_page():
    st.markdown("## API Keys Management")
    st.markdown("Set up your API keys to use with WhisperForge. Your keys are encrypted and stored securely.")
    
    # Get current API keys
    api_keys = get_user_api_keys()
    
    # OpenAI API Key
    st.markdown("### OpenAI API Key")
    st.markdown("Required for audio transcription and most AI capabilities.")
    
    # Create a masked display of the current key if it exists
    openai_key = api_keys.get("openai", "")
    openai_key_display = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢{openai_key[-4:]}" if openai_key else "Not set"
    
    st.markdown(f"**Current key:** {openai_key_display}")
    
    # Input for new key
    new_openai_key = st.text_input("Enter new OpenAI API key", type="password", key="new_openai_key")
    if st.button("Save OpenAI Key"):
        if new_openai_key:
            update_api_key("openai", new_openai_key)
            st.success("OpenAI API key updated successfully!")
            time.sleep(1)
            st.rerun()
    
    st.markdown("---")
    
    # Anthropic API Key
    st.markdown("### Anthropic API Key")
    st.markdown("Optional: Used for Claude AI models.")
    
    anthropic_key = api_keys.get("anthropic", "")
    anthropic_key_display = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢{anthropic_key[-4:]}" if anthropic_key else "Not set"
    
    st.markdown(f"**Current key:** {anthropic_key_display}")
    
    new_anthropic_key = st.text_input("Enter new Anthropic API key", type="password", key="new_anthropic_key")
    if st.button("Save Anthropic Key"):
        update_api_key("anthropic", new_anthropic_key)
        st.success("Anthropic API key updated successfully!")
        time.sleep(1)
        st.rerun()
    
    st.markdown("---")
    
    # Notion API Key
    st.markdown("### Notion API Key")
    st.markdown("Optional: Used for exporting content to Notion.")
    
    notion_key = api_keys.get("notion", "")
    notion_key_display = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢{notion_key[-4:]}" if notion_key else "Not set"
    
    st.markdown(f"**Current key:** {notion_key_display}")
    
    col1, col2 = st.columns(2)
    with col1:
        new_notion_key = st.text_input("Enter new Notion API key", type="password", key="new_notion_key")
    with col2:
        notion_database_id = st.text_input("Notion Database ID", value=api_keys.get("notion_database_id", ""), key="notion_database_id")
    
    if st.button("Save Notion Settings"):
        update_api_key("notion", new_notion_key)
        update_api_key("notion_database_id", notion_database_id)
        st.success("Notion settings updated successfully!")
        time.sleep(1)
        st.rerun()
    
    st.markdown("---")
    
    # Grok API Key
    st.markdown("### Grok API Key (Experimental)")
    st.markdown("Optional: Used for Grok AI models.")
    
    grok_key = api_keys.get("grok", "")
    grok_key_display = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢{grok_key[-4:]}" if grok_key else "Not set"
    
    st.markdown(f"**Current key:** {grok_key_display}")
    
    new_grok_key = st.text_input("Enter new Grok API key", type="password", key="new_grok_key")
    if st.button("Save Grok Key"):
        update_api_key("grok", new_grok_key)
        st.success("Grok API key updated successfully!")
        time.sleep(1)
        st.rerun()

def show_usage_page():
    st.markdown("## Usage Statistics")
    
    # Get user info
    conn = get_db_connection()
    user = conn.execute(
        "SELECT email, subscription_tier, usage_quota, usage_current, created_at FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()
    conn.close()
    
    if not user:
        st.error("Error retrieving user data")
        return
    
    # User info section
    st.markdown("### Account Information")
    st.write(f"**Email:** {user['email']}")
    st.write(f"**Account created:** {user['created_at']}")
    st.write(f"**Subscription tier:** {user['subscription_tier'].title()}")
    
    # Usage statistics
    st.markdown("### Current Usage")
    
    # Calculate percentage
    usage_percent = min(100, (user['usage_current'] / user['usage_quota']) * 100) if user['usage_quota'] > 0 else 0
    
    # Show progress bar
    st.progress(usage_percent / 100)
    st.write(f"**Usage this month:** {user['usage_current']} / {user['usage_quota']} minutes ({usage_percent:.1f}%)")
    
    # Upgrade options
    st.markdown("### Upgrade Your Plan")
    st.markdown("""
    | Plan | Monthly Price | Minutes/Month | Features |
    |------|---------------|---------------|----------|
    | Free | $0 | 60 | Basic transcription |
    | Basic | $9.99 | 300 | + Claude AI models |
    | Pro | $19.99 | 1,000 | + Advanced processing |
    | Enterprise | Contact us | Custom | Custom integrations |
    """)
    
    if user['subscription_tier'] != 'enterprise':
        if st.button("Upgrade Now"):
            st.info("This would redirect to a payment page in the production version.")
    
    # Reset usage manually (for testing)
    if st.button("Reset Usage Counter"):
        conn = get_db_connection()
        conn.execute(
            "UPDATE users SET usage_current = 0 WHERE id = ?",
            (st.session_state.user_id,)
        )
        conn.commit()
        conn.close()
        st.success("Usage counter reset to 0")
        time.sleep(1)
        st.rerun()

def update_api_key(key_name, key_value):
    if not st.session_state.authenticated:
        return False
    
    conn = get_db_connection()
    
    # Get current api_keys JSON
    user = conn.execute(
        "SELECT api_keys FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()
    
    if not user:
        conn.close()
        return False
    
    # Update the specific key
    api_keys = json.loads(user['api_keys']) if user['api_keys'] else {}
    
    # If key value is empty, remove the key
    if key_value:
        api_keys[key_name] = key_value
    else:
        api_keys.pop(key_name, None)
    
    # Save back to the database
    conn.execute(
        "UPDATE users SET api_keys = ? WHERE id = ?",
        (json.dumps(api_keys), st.session_state.user_id)
    )
    conn.commit()
    conn.close()
    return True
    
def get_api_key_for_service(service_name):
    """Get the API key for a specific service from the user's stored keys"""
    # Prioritize environment variables for testing
    if service_name == "openai":
        env_key = os.getenv("OPENAI_API_KEY")
        if env_key:
            return env_key
    elif service_name == "anthropic":
        env_key = os.getenv("ANTHROPIC_API_KEY")
        if env_key:
            return env_key
    elif service_name == "notion":
        env_key = os.getenv("NOTION_API_KEY")
        if env_key:
            return env_key
    elif service_name == "grok":
        env_key = os.getenv("GROK_API_KEY")
        if env_key:
            return env_key
    
    if not st.session_state.authenticated:
        # Fallback to environment variables
        if service_name == "openai":
            return os.getenv("OPENAI_API_KEY")
        elif service_name == "anthropic":
            return os.getenv("ANTHROPIC_API_KEY")
        elif service_name == "notion":
            return os.getenv("NOTION_API_KEY")
        elif service_name == "grok":
            return os.getenv("GROK_API_KEY")
        return None
    
    # Get from user's stored keys
    api_keys = get_user_api_keys()
    key = api_keys.get(service_name)
    
    # Fallback to environment if user doesn't have a key
    if not key:
        if service_name == "openai":
            return os.getenv("OPENAI_API_KEY")
        elif service_name == "anthropic":
            return os.getenv("ANTHROPIC_API_KEY")
        elif service_name == "notion":
            return os.getenv("NOTION_API_KEY")
        elif service_name == "grok":
            return os.getenv("GROK_API_KEY")
    
    return key

# Authentication UI
def show_login_page():
    st.markdown(f"""
    <div class="header-container">
        <div class="header-title">WhisperForge // Authentication</div>
        <div class="header-date">{datetime.now().strftime('%a %d %b %Y ¬∑ %H:%M')}</div>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["Login", "Register"])
    
    with tab1:
        email = st.text_input("Email", key="login_email")
        password = st.text_input("Password", type="password", key="login_password")
        
        if st.button("Login", key="login_button"):
            if email and password:
                if authenticate_user(email, password):
                    st.success("Login successful!")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("Invalid email or password")
            else:
                st.warning("Please enter both email and password")
    
    with tab2:
        email = st.text_input("Email", key="register_email")
        password = st.text_input("Password", type="password", key="register_password")
        confirm_password = st.text_input("Confirm Password", type="password", key="register_confirm_password")
        
        if st.button("Register", key="register_button"):
            if not email or not password or not confirm_password:
                st.warning("Please fill out all fields")
            elif not re.match(r"[^@]+@[^@]+\.[^@]+", email):
                st.error("Please enter a valid email address")
            elif password != confirm_password:
                st.error("Passwords do not match")
            elif len(password) < 8:
                st.error("Password must be at least 8 characters long")
            else:
                if register_user(email, password):
                    st.success("Registration successful! Please login.")
                else:
                    st.error("Email already exists")

def authenticate_user(email, password):
    conn = get_db_connection()
    hashed_password = hash_password(password)
    
    user = conn.execute(
        "SELECT id FROM users WHERE email = ? AND password = ?",
        (email, hashed_password)
    ).fetchone()
    
    conn.close()
    
    if user:
        st.session_state.user_id = user["id"]
        st.session_state.authenticated = True
        return True
    return False

def register_user(email, password):
    conn = get_db_connection()
    hashed_password = hash_password(password)
    
    # Check if user already exists
    existing_user = conn.execute(
        "SELECT id FROM users WHERE email = ?", 
        (email,)
    ).fetchone()
    
    if existing_user:
        conn.close()
        return False
    
    # Create new user
    conn.execute(
        "INSERT INTO users (email, password, api_keys) VALUES (?, ?, ?)",
        (email, hashed_password, json.dumps({}))
    )
    conn.commit()
    conn.close()
    return True

def show_account_sidebar():
    st.markdown("### Account")
    
    # Get user info
    conn = get_db_connection()
    user = conn.execute(
        "SELECT email, subscription_tier, usage_quota, usage_current FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()
    conn.close()
    
    if user:
        st.write(f"**Email:** {user['email']}")
        st.write(f"**Plan:** {user['subscription_tier'].title()}")
        
        # Show usage meter
        usage_percent = min(100, (user['usage_current'] / user['usage_quota']) * 100) if user['usage_quota'] > 0 else 0
        st.progress(usage_percent / 100)
        st.write(f"Usage: {user['usage_current']} / {user['usage_quota']} minutes")
        
        # Upgrade account link
        st.markdown("[Upgrade Account](#)")
    
    # Logout button
    if st.button("Logout"):
        st.session_state.authenticated = False
        st.session_state.user_id = None
        st.rerun()

def get_user_api_keys():
    if not st.session_state.authenticated:
        return {}
    
    conn = get_db_connection()
    user = conn.execute(
        "SELECT api_keys FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()
    conn.close()
    
    if user and user['api_keys']:
        return json.loads(user['api_keys'])
    return {}

def update_usage_tracking(duration_seconds):
    if not st.session_state.authenticated:
        return
    
    # Convert seconds to minutes and round up
    minutes = math.ceil(duration_seconds / 60)
    
    conn = get_db_connection()
    conn.execute(
        "UPDATE users SET usage_current = usage_current + ? WHERE id = ?",
        (minutes, st.session_state.user_id)
    )
    conn.commit()
    conn.close()

# Default prompts in case user prompts are not available
DEFAULT_PROMPTS = {
    "wisdom_extraction": """Extract key insights, lessons, and wisdom from the transcript. Focus on actionable takeaways and profound realizations.""",
    
    "summary": """## Summary
Create a concise summary of the main points and key messages in the transcript.
Capture the essence of the content in a few paragraphs.""",
    
    "outline_creation": """Create a detailed outline for an article or blog post based on the transcript and extracted wisdom. Include major sections and subsections.""",
    
    "social_media": """Generate engaging social media posts for different platforms (Twitter, LinkedIn, Instagram) based on the key insights.""",
    
    "image_prompts": """Create detailed image generation prompts that visualize the key concepts and metaphors from the content.""",
    
    "article_writing": """Write a comprehensive article based on the provided outline and wisdom. Maintain a clear narrative flow and engaging style.""",
    
    "seo_analysis": """Analyze the content from an SEO perspective and provide optimization recommendations for better search visibility while maintaining content quality."""
}

# Set up security headers
def add_security_headers():
    st.markdown("""
        <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'">
        <meta http-equiv="X-Frame-Options" content="DENY">
        <meta http-equiv="X-Content-Type-Options" content="nosniff">
    """, unsafe_allow_html=True)

# Add extended CSS for production look and feel
def add_production_css():
    with open('static/css/production.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# Initialize database with admin user if not exists
def init_admin_user():
    """Create an admin user if none exists"""
    conn = get_db_connection()
    admin_exists = conn.execute(
        "SELECT COUNT(*) FROM users WHERE is_admin = 1"
    ).fetchone()[0]
    
    if admin_exists == 0:
        # Create admin user with default password
        admin_email = os.getenv("ADMIN_EMAIL", "admin@whisperforge.ai")
        admin_password = os.getenv("ADMIN_PASSWORD", "WhisperForge2024!")
        
        hashed_password = hash_password(admin_password)
        
        conn.execute(
            "INSERT INTO users (email, password, is_admin, subscription_tier, usage_quota) VALUES (?, ?, ?, ?, ?)",
            (admin_email, hashed_password, 1, "enterprise", 100000)
        )
        conn.commit()
    
    conn.close()

# Admin tools
def show_admin_page():
    """Show admin dashboard with user management"""
    st.markdown("## Admin Dashboard")
    
    # Check if current user is admin
    conn = get_db_connection()
    is_admin = conn.execute(
        "SELECT is_admin FROM users WHERE id = ?",
        (st.session_state.user_id,)
    ).fetchone()[0]
    
    if not is_admin:
        st.error("You do not have permission to access this page.")
        conn.close()
        return
    
    # Create tabs for different admin functions
    admin_tabs = st.tabs(["System Overview", "User Management", "Model Configuration", "App Configuration"])
    
    # System Overview Tab
    with admin_tabs[0]:
        st.markdown("### System Overview")
        
        # Get statistics
        user_count = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
        active_users = conn.execute(
            "SELECT COUNT(*) FROM users WHERE usage_current > 0"
        ).fetchone()[0]
        paying_users = conn.execute(
            "SELECT COUNT(*) FROM users WHERE subscription_tier != 'free'"
        ).fetchone()[0]
        
        # Display stats in a grid
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Users", user_count)
        with col2:
            st.metric("Active Users", active_users)
        with col3:
            st.metric("Paying Users", paying_users)
    
    # User Management Tab
    with admin_tabs[1]:
        st.markdown("### User Management")
        
        # List all users
        users = conn.execute(
            "SELECT id, email, created_at, subscription_tier, usage_quota, usage_current, is_admin FROM users ORDER BY id"
        ).fetchall()
        
        if not users:
            st.info("No users found.")
        else:
            # Create table
            data = []
            for user in users:
                data.append({
                    "ID": user["id"],
                    "Email": user["email"],
                    "Created": user["created_at"].split(" ")[0] if " " in user["created_at"] else user["created_at"],
                    "Plan": user["subscription_tier"],
                    "Usage": f"{user['usage_current']}/{user['usage_quota']} min",
                    "Admin": "Yes" if user["is_admin"] else "No"
                })
            
            st.dataframe(data)
        
        # Edit user form
        st.markdown("### Edit User")
        user_id = st.number_input("User ID", min_value=1, step=1)
        
        if st.button("Load User"):
            user = conn.execute(
                "SELECT * FROM users WHERE id = ?", 
                (user_id,)
            ).fetchone()
            
            if user:
                st.session_state.edit_user = dict(user)
                st.success(f"Loaded user: {user['email']}")
            else:
                st.error("User not found")
        
        if hasattr(st.session_state, "edit_user"):
            user = st.session_state.edit_user
            
            email = st.text_input("Email", value=user["email"])
            subscription = st.selectbox(
                "Subscription Tier", 
                options=["free", "basic", "pro", "enterprise"],
                index=["free", "basic", "pro", "enterprise"].index(user["subscription_tier"])
            )
            quota = st.number_input("Usage Quota (minutes)", value=user["usage_quota"], min_value=0)
            reset_usage = st.checkbox("Reset current usage to 0")
            is_admin = st.checkbox("Admin", value=bool(user["is_admin"]))
            
            if st.button("Save Changes"):
                if reset_usage:
                    usage_current = 0
                else:
                    usage_current = user["usage_current"]
                    
                conn.execute(
                    """
                    UPDATE users 
                    SET email = ?, subscription_tier = ?, usage_quota = ?, 
                        usage_current = ?, is_admin = ?
                    WHERE id = ?
                    """,
                    (email, subscription, quota, usage_current, int(is_admin), user_id)
                )
                conn.commit()
                st.success("User updated successfully")
    
    # Model Configuration Tab
    with admin_tabs[2]:
        st.markdown("### Model Configuration")
        
        config_tab1, config_tab2 = st.tabs(["Transcription Model", "Content Processing Model"])
        
        with config_tab1:
            st.subheader("Transcription Model Settings")
            
            # Display current default
            st.markdown(f"**Current default:** {st.session_state.transcription_provider}/{st.session_state.transcription_model}")
            
            transcription_provider = st.selectbox(
                "Transcription Provider",
                options=["OpenAI"],  # Currently only OpenAI supports transcription
                index=0
            )
            
            transcription_models = ["whisper-1"]
            if transcription_provider == "OpenAI":
                transcription_models = ["whisper-1"]
            
            transcription_model = st.selectbox(
                "Transcription Model",
                options=transcription_models,
                index=0
            )
            
            if st.button("Set as Default Transcription Model"):
                st.session_state.transcription_provider = transcription_provider
                st.session_state.transcription_model = transcription_model
                
                # Save to database for persistence (if you want to implement this)
                # conn.execute("UPDATE system_settings SET value = ? WHERE key = 'default_transcription_provider'", (transcription_provider,))
                # conn.execute("UPDATE system_settings SET value = ? WHERE key = 'default_transcription_model'", (transcription_model,))
                # conn.commit()
                
                st.success(f"Default transcription model set to {transcription_provider}/{transcription_model}")
        
        with config_tab2:
            st.subheader("Content Processing Model Settings")
            
            # Display current default
            st.markdown(f"**Current default:** {st.session_state.ai_provider}/{st.session_state.ai_model}")
            
            ai_provider = st.selectbox(
                "AI Provider",
                options=["Anthropic", "OpenAI"],
                index=0 if st.session_state.ai_provider == "Anthropic" else 1
            )
            
            # Show different model options based on provider
            if ai_provider == "Anthropic":
                anthropic_models = get_available_models("Anthropic")
                default_index = anthropic_models.index("claude-3-7-sonnet-20250219") if "claude-3-7-sonnet-20250219" in anthropic_models else 0
                ai_model = st.selectbox(
                    "AI Model",
                    options=anthropic_models,
                    index=default_index
                )
            else:  # OpenAI
                openai_models = get_available_models("OpenAI")
                default_index = 0
                ai_model = st.selectbox(
                    "AI Model",
                    options=openai_models,
                    index=default_index
                )
            
            if st.button("Set as Default Content Processing Model"):
                st.session_state.ai_provider = ai_provider
                st.session_state.ai_model = ai_model
                
                # Save to database for persistence (if you want to implement this)
                # conn.execute("UPDATE system_settings SET value = ? WHERE key = 'default_ai_provider'", (ai_provider,))
                # conn.execute("UPDATE system_settings SET value = ? WHERE key = 'default_ai_model'", (ai_model,))
                # conn.commit()
                
                st.success(f"Default content processing model set to {ai_provider}/{ai_model}")
    
    # App Configuration Tab
    with admin_tabs[3]:
        st.markdown("### App Configuration")
        
        # User Profile Settings
        st.subheader("User Profile Settings")
        selected_user = st.selectbox(
            "Default User Profile",
            options=get_available_users(),
            index=get_available_users().index(st.session_state.get("user_profile_sidebar", "Default")) if st.session_state.get("user_profile_sidebar", "Default") in get_available_users() else 0,
            key="admin_user_profile"
        )
        
        if st.button("Set as Default User Profile"):
            st.session_state.user_profile_sidebar = selected_user
            st.success(f"Default user profile set to {selected_user}")
        
        # Knowledge Base Management
        st.subheader("Knowledge Base")
        knowledge_files = list_knowledge_base_files(selected_user)
        if knowledge_files:
            st.write(f"Knowledge base files for {selected_user}:")
            for file in knowledge_files:
                st.code(file, language="")
        else:
            st.info(f"No knowledge base files found for {selected_user}")
        
        # Upload Knowledge Base File
        uploaded_kb_file = st.file_uploader("Upload Knowledge Base File", type=["txt", "md"])
        if uploaded_kb_file is not None:
            file_name = uploaded_kb_file.name
            kb_path = os.path.join('prompts', selected_user, 'knowledge_base')
            os.makedirs(kb_path, exist_ok=True)
            
            with open(os.path.join(kb_path, file_name), "wb") as f:
                f.write(uploaded_kb_file.getvalue())
            
            st.success(f"File {file_name} uploaded to knowledge base for {selected_user}")
        
        # Custom Prompts Configuration
        st.subheader("Custom Prompts")
        users_prompts = load_prompts()
        
        # Configure custom prompts for the selected user
        configure_prompts(st.session_state.prompts)
    
    conn.close()
    
# Show terms and privacy
def show_legal_page():
    """Show terms of service and privacy policy"""
    st.markdown("## Legal Information")
    
    tab1, tab2 = st.tabs(["Terms of Service", "Privacy Policy"])
    
    with tab1:
        st.markdown("""
        # WhisperForge Terms of Service
        
        Last updated: April 1, 2024
        
        ## 1. Acceptance of Terms
        
        By accessing or using WhisperForge ("the Service"), you agree to be bound by these Terms of Service. If you do not agree to these terms, please do not use the Service.
        
        ## 2. Description of Service
        
        WhisperForge is an AI-powered audio transcription and content generation tool that provides transcription services, content analysis, and content creation capabilities.
        
        ## 3. User Accounts
        
        To use certain features of the Service, you must register for an account. You agree to provide accurate information and to keep this information updated. You are responsible for maintaining the confidentiality of your account credentials and for all activities that occur under your account.
        
        ## 4. Usage Limitations
        
        Different subscription tiers have different usage limits. You agree not to exceed the limits of your subscription tier.
        
        ## 5. API Keys and Third-Party Services
        
        The Service allows you to use your own API keys for third-party services such as OpenAI, Anthropic, and Notion. You are responsible for:
        - Obtaining and maintaining valid API keys
        - Any costs associated with your use of these third-party services
        - Complying with the terms of service of these third-party providers
        
        ## 6. Content Ownership
        
        You retain ownership of all content you upload or create using the Service. However, you grant WhisperForge a non-exclusive license to use, store, and process your content for the purpose of providing the Service.
        
        ## 7. Prohibited Uses
        
        You agree not to use the Service for any illegal or prohibited purpose, including but not limited to:
        - Violating intellectual property rights
        - Distributing malware or engaging in phishing
        - Generating harmful, abusive, or deceptive content
        - Attempting to gain unauthorized access to the system
        
        ## 8. Termination
        
        WhisperForge reserves the right to terminate or suspend your account at any time for violation of these terms or for any other reason.
        
        ## 9. Changes to Terms
        
        WhisperForge may modify these terms at any time. Continued use of the Service after such changes constitutes your acceptance of the new terms.
        
        ## 10. Contact
        
        If you have any questions about these Terms, please contact us at support@whisperforge.ai.
        """)
    
    with tab2:
        st.markdown("""
        # WhisperForge Privacy Policy
        
        Last updated: April 1, 2024
        
        ## 1. Information We Collect
        
        We collect the following types of information:
        
        ### 1.1 Account Information
        - Email address
        - Hashed password
        - Subscription details
        
        ### 1.2 Content Data
        - Audio files you upload for transcription
        - Transcriptions and content generated from your audio
        - API keys you provide for third-party services
        
        ### 1.3 Usage Information
        - Features you use
        - Time spent using the Service
        - Error logs and performance data
        
        ## 2. How We Use Your Information
        
        We use your information to:
        - Provide and improve the Service
        - Process payments and manage subscriptions
        - Communicate with you about your account
        - Monitor and analyze usage patterns
        
        ## 3. Data Security
        
        We implement reasonable security measures to protect your information. Your API keys are encrypted in our database. We do not store your audio files longer than necessary to process them.
        
        ## 4. Third-Party Services
        
        When you use your own API keys, your content may be processed by these third-party services according to their privacy policies:
        - OpenAI (for transcription and AI processing)
        - Anthropic (for AI processing)
        - Notion (for content export)
        
        ## 5. Cookies and Tracking
        
        We use cookies and similar technologies to track usage of our Service and remember your preferences.
        
        ## 6. Your Rights
        
        Depending on your location, you may have rights to:
        - Access your personal information
        - Correct inaccurate information
        - Delete your data
        - Object to processing
        - Export your data
        
        ## 7. Changes to Privacy Policy
        
        We may update this privacy policy from time to time. We will notify you of any significant changes.
        
        ## 8. Contact
        
        If you have questions about our privacy practices, please contact us at privacy@whisperforge.ai.
        """)

def direct_transcribe_audio(audio_file_path, api_key=None):
    """
    Transcribe audio directly using the OpenAI API without relying on the OpenAI Python client.
    This is a fallback method to use when the OpenAI client has initialization issues.
    """
    logger.debug(f"Starting direct transcription of {audio_file_path}")
    
    if not api_key:
        api_key = get_api_key_for_service("openai")
        if not api_key:
            logger.error("No OpenAI API key available")
            return "Error: OpenAI API key is not provided or configured"
    
    try:
        import requests
        
        logger.debug("Preparing API request for direct transcription")
        url = "https://api.openai.com/v1/audio/transcriptions"
        headers = {
            "Authorization": f"Bearer {api_key}"
        }
        
        # Check file exists
        if not os.path.exists(audio_file_path):
            logger.error(f"Audio file not found: {audio_file_path}")
            return "Error: Audio file not found"
        
        # Log file details
        file_size = os.path.getsize(audio_file_path)
        logger.debug(f"Audio file size: {file_size/1024/1024:.2f} MB")
        
        # Open the file in binary mode
        with open(audio_file_path, "rb") as audio_file:
            files = {
                "file": (os.path.basename(audio_file_path), audio_file, "audio/mpeg"),
                "model": (None, "whisper-1")
            }
            
            logger.debug("Sending request to OpenAI API")
            response = requests.post(url, headers=headers, files=files, timeout=120)
            
            # Check for errors
            if response.status_code != 200:
                logger.error(f"API Error: {response.status_code} - {response.text}")
                return f"Error: API returned status code {response.status_code}: {response.text}"
            
            # Parse the response
            try:
                result = response.json()
                logger.debug("Successfully received transcription from API")
                return result.get("text", "")
            except Exception as parse_error:
                logger.error(f"Error parsing API response: {str(parse_error)}")
                return f"Error parsing API response: {str(parse_error)}"
                
    except Exception as e:
        logger.exception("Exception in direct_transcribe_audio:")
        return f"Error transcribing audio directly: {str(e)}"

def direct_anthropic_completion(prompt, api_key=None, model="claude-3-7-sonnet-20250219"):
    """
    Generate content directly using the Anthropic API without relying on the Anthropic client.
    This is a fallback method to use when the Anthropic client has initialization issues.
    """
    logger.debug(f"Starting direct Anthropic API call for model: {model}")
    
    if not api_key:
        api_key = get_api_key_for_service("anthropic")
        if not api_key:
            logger.error("No Anthropic API key available")
            return "Error: Anthropic API key is not provided or configured"
    
    try:
        import requests
        import json
        
        logger.debug("Preparing API request for Anthropic")
        url = "https://api.anthropic.com/v1/messages"
        headers = {
            "x-api-key": api_key,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }
        
        # Prepare the payload
        payload = {
            "model": model,
            "max_tokens": 1500,
            "messages": [
                {"role": "user", "content": prompt}
            ]
        }
        
        logger.debug(f"Payload prepared, content length: {len(prompt)} characters")
        
        # Send the request
        logger.debug("Sending request to Anthropic API")
        response = requests.post(url, headers=headers, json=payload, timeout=120)
        
        # Check for errors
        if response.status_code != 200:
            logger.error(f"API Error: {response.status_code} - {response.text}")
            return f"Error: API returned status code {response.status_code}: {response.text}"
        
        # Parse the response
        try:
            result = response.json()
            logger.debug("Successfully received content from Anthropic API")
            # Extract the content
            if "content" in result and len(result["content"]) > 0:
                return result["content"][0]["text"]
            else:
                logger.error("Response did not contain expected content")
                return "Error: Response did not contain expected content"
        except Exception as parse_error:
            logger.error(f"Error parsing API response: {str(parse_error)}")
            return f"Error parsing Anthropic API response: {str(parse_error)}"
            
    except Exception as e:
        logger.exception("Exception in direct_anthropic_completion:")
        return f"Error generating content directly with Anthropic: {str(e)}"

def export_to_notion():
    """Export content to Notion using the create_content_notion_entry function"""
    try:
        logger.debug("Starting export to Notion")
        
        # Gather content
        title = st.session_state.get("file_name", "Untitled Audio")
        transcript = st.session_state.get("transcript", "")
        wisdom = st.session_state.get("wisdom", None)
        outline = st.session_state.get("outline", None)
        social_content = st.session_state.get("social_content", None)
        image_prompts = st.session_state.get("image_prompts", None)
        article = st.session_state.get("article", None)
        
        # Create content in Notion
        result = create_content_notion_entry(
            title=title,
            transcript=transcript,
            wisdom=wisdom,
            outline=outline,
            social_content=social_content,
            image_prompts=image_prompts,
            article=article
        )
        
        if result:
            logger.debug(f"Successfully exported to Notion: {result}")
            return result
        else:
            logger.error("Failed to export to Notion")
            st.error("Failed to export to Notion. Please check your Notion API configuration.")
            return None
    
    except Exception as e:
        logger.exception("Error in export_to_notion:")
        st.error(f"Error exporting to Notion: {str(e)}")
        return None

def direct_notion_save(title, transcript, wisdom=None, outline=None, social_content=None, image_prompts=None, article=None):
    """
    Save content directly to Notion API without relying on the notion_client library.
    """
    logger.debug(f"Starting direct Notion save for title: {title}")
    
    # Get API key and database ID
    api_key = get_api_key_for_service("notion")
    database_id = get_notion_database_id()
    
    if not api_key:
        logger.error("No Notion API key available")
        return {"error": "Error: Notion API key is not provided or configured"}
        
    if not database_id:
        logger.error("No Notion database ID available")
        return {"error": "Error: Notion database ID is not provided or configured"}
    
    try:
        import requests
        import json
        from datetime import datetime
        
        # Generate AI title if none provided or generic title
        if not title or title == "Untitled Audio" or title == "Untitled Content" or title.startswith("WhisperForge"):
            logger.debug("Generating AI title for Notion page")
            ai_title = generate_short_title(transcript)
            title = ai_title
            logger.debug(f"Generated title: {title}")
        
        # Generate tags for the content
        logger.debug("Generating tags for Notion page")
        content_tags = generate_content_tags(transcript, wisdom)
        logger.debug(f"Generated tags: {content_tags}")
        
        logger.debug("Preparing API request for Notion")
        url = "https://api.notion.com/v1/pages"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        # Initialize content blocks
        children = []
        
        # Add summary if wisdom is available
        if wisdom:
            children.append({
                "object": "block",
                "type": "callout",
                "callout": {
                    "rich_text": [{"type": "text", "text": {"content": wisdom[:2000]}}],
                    "color": "purple_background",
                    "icon": {"type": "emoji", "emoji": "üíú"}
                }
            })
        
        # Add transcript toggle
        if transcript:
            # Split transcript into chunks to respect Notion's block size limit
            transcript_chunks = [transcript[i:i+2000] for i in range(0, len(transcript), 2000)]
            
            # Create transcript toggle
            transcript_blocks = [{
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                }
            } for chunk in transcript_chunks]
            
            children.append({
                "object": "block",
                "type": "toggle",
                "toggle": {
                    "rich_text": [{"type": "text", "text": {"content": "‚ñ∂Ô∏è Transcription"}}],
                    "children": transcript_blocks
                }
            })
        
        # Add wisdom toggle
        if wisdom:
            children.append({
                "object": "block",
                "type": "toggle",
                "toggle": {
                    "rich_text": [{"type": "text", "text": {"content": "‚ñ∂Ô∏è Wisdom"}}],
                    "children": [{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": wisdom[:2000]}}]
                        }
                    }]
                }
            })
        
        # Add outline toggle
        if outline:
            children.append({
                "object": "block",
                "type": "toggle",
                "toggle": {
                    "rich_text": [{"type": "text", "text": {"content": "‚ñ∂Ô∏è Outline"}}],
                    "children": [{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": outline[:2000]}}]
                        }
                    }]
                }
            })
        
        # Add metadata section
        children.append({
            "object": "block",
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "Metadata"}}]
            }
        })
        
        children.append({
            "object": "block",
            "type": "paragraph",
            "paragraph": {
                "rich_text": [
                    {"type": "text", "text": {"content": "Created with "}},
                    {"type": "text", "text": {"content": "WhisperForge"}, "annotations": {"bold": True, "color": "purple"}}
                ]
            }
        })
        
        # Add tags to metadata
        if content_tags:
            tags_text = ", ".join(content_tags)
            children.append({
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {"type": "text", "text": {"content": "Tags: "}, "annotations": {"bold": True}},
                        {"type": "text", "text": {"content": tags_text}}
                    ]
                }
            })
        
        # Prepare the payload
        payload = {
            "parent": {"database_id": database_id},
            "properties": {
                "Name": {
                    "title": [{"text": {"content": title}}]
                },
                "Created": {
                    "date": {"start": datetime.now().isoformat()}
                }
            },
            "children": children
        }
        
        # Add tags to properties if the database has a multi-select Tags property
        if content_tags:
            payload["properties"]["Tags"] = {"multi_select": [{"name": tag} for tag in content_tags]}
        
        logger.debug(f"Payload prepared with {len(children)} content blocks")
        
        # Send the request
        logger.debug("Sending request to Notion API")
        response = requests.post(url, headers=headers, json=payload)
        
        # Check for errors
        if response.status_code != 200:
            logger.error(f"API Error: {response.status_code} - {response.text}")
            return {"error": f"Error: API returned status code {response.status_code}: {response.text}"}
        
        # Parse the response
        result = response.json()
        logger.debug("Successfully saved page to Notion")
        
        return {"url": result.get("url", ""), "id": result.get("id", "")}
            
    except Exception as e:
        logger.exception("Exception in direct_notion_save:")
        return {"error": f"Error saving to Notion: {str(e)}"}

def is_admin_user():
    """Check if the current user is an admin"""
    try:
        conn = get_db_connection()
        is_admin = conn.execute(
            "SELECT is_admin FROM users WHERE id = ?",
            (st.session_state.user_id,)
        ).fetchone()
        conn.close()
        
        return is_admin and is_admin[0]
    except Exception:
        return False

def create_custom_header():
    # See if Admin link should be visible
    admin_link = ""
    if is_admin_user():
        admin_link = '<a href="?page=admin" class="nav-item" id="nav-admin">Admin</a>'
    
    # Create the HTML and JS as separate strings
    header_html = f'''
    <div class="header-container">
        <div class="header-left">
            <div class="header-title">WhisperForge // Control_Center</div>
        </div>
        <div class="header-nav">
            <a href="?page=home" class="nav-item" id="nav-home">Home</a>
            <a href="?page=api" class="nav-item" id="nav-api">API Keys</a>
            <a href="?page=usage" class="nav-item" id="nav-usage">Usage</a>
            <a href="?page=user_config" class="nav-item" id="nav-user-config">User Config</a>
            {admin_link}
            <a href="?page=legal" class="nav-item" id="nav-legal">Legal</a>
        </div>
        <div class="header-right">
            <div class="header-date">{datetime.now().strftime("%Y-%m-%d %H:%M")}</div>
        </div>
    </div>
    '''
    
    # JavaScript as a separate string
    js_code = '''
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get current URL and extract page parameter
            const urlParams = new URLSearchParams(window.location.search);
            const currentPage = urlParams.get('page') || 'home';
            
            // Find all navigation links
            const navLinks = document.querySelectorAll('.nav-item');
            
            // Loop through links and add active class to current page
            navLinks.forEach(link => {
                const linkId = link.id;
                if (linkId === 'nav-' + currentPage) {
                    link.classList.add('active');
                }
            });
        });
    </script>
    '''
    
    # Combine the HTML and JavaScript
    full_header = header_html + js_code
    st.markdown(full_header, unsafe_allow_html=True)

def load_js():
    """Load JavaScript files"""
    # Load cookie consent JavaScript
    with open('static/js/cookie-consent.js') as f:
        st.markdown(f'<script>{f.read()}</script>', unsafe_allow_html=True)
        
    # Load UI interactions JavaScript
    with open('static/js/ui-interactions.js') as f:
        st.markdown(f'<script>{f.read()}</script>', unsafe_allow_html=True)

# Show cookie consent banner if necessary
def show_cookie_banner():
    if st.session_state.show_cookie_banner:
        cookie_banner_html = """
        <div class="cookie-banner">
            <div>
                We use cookies to improve your experience. By continuing, you consent to our use of cookies.
                <a href="?page=legal">Learn more</a>
            </div>
            <div class="cookie-banner-buttons">
                <button>Accept</button>
            </div>
        </div>
        """
        st.markdown(cookie_banner_html, unsafe_allow_html=True)

def transcribe_with_whisper(file_path):
    """Transcribe an audio file directly using OpenAI's Whisper API"""
    try:
        api_key = get_api_key_for_service("openai")
        if not api_key:
            error_msg = "OpenAI API key is not configured"
            logger.error(error_msg)
            st.error(f"‚ùå {error_msg}. Please set up your API key in the settings.")
            return ""
        
        logger.info(f"Starting direct transcription of file: {file_path}")
        
        # Verify file exists and is readable
        if not os.path.exists(file_path):
            error_msg = f"File not found: {file_path}"
            logger.error(error_msg)
            st.error(f"‚ùå {error_msg}")
            return ""
        
        # Check file size
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            error_msg = "Audio file is empty"
            logger.error(error_msg)
            st.error(f"‚ùå {error_msg}")
            return ""
        
        # Create progress indicators
        progress_text = st.empty()
        progress_text.text("Preparing audio for transcription...")
        progress_bar = st.progress(0)
        
        # Progress update function for use in both methods
        def update_progress(progress, message):
            progress_bar.progress(progress)
            progress_text.text(message)
        
        # Try direct API call first (more robust method)
        try:
            update_progress(0.2, "Uploading audio to OpenAI API...")
            
            # Use requests for direct API call
            import requests
            import json
            
            # Prepare the API request
            headers = {
                "Authorization": f"Bearer {api_key}"
            }
            
            url = "https://api.openai.com/v1/audio/transcriptions"
            
            # Set transcription options
            options = {}
            
            # Check for language code in session state
            if st.session_state.get('language_code') and st.session_state.get('language_code') != 'auto':
                options['language'] = st.session_state.get('language_code')
                logger.debug(f"Setting language to: {options['language']}")
            
            # Check for response format preference
            response_format = st.session_state.get('response_format', 'text')
            options['response_format'] = response_format
            
            # Get model preference or use default
            model = st.session_state.get('transcription_model', 'whisper-1')
            
            # Create form data
            files = {
                'file': open(file_path, 'rb')
            }
            
            data = {
                'model': model,
                **options
            }
            
            # Attempt the API call
            update_progress(0.4, "Sending request to OpenAI API...")
            logger.debug(f"Making OpenAI API request with model: {model}, options: {options}")
            
            response = requests.post(url, headers=headers, files=files, data=data)
            
            # Process the response
            update_progress(0.8, "Processing API response...")
            
            if response.status_code == 200:
                if response_format == 'text':
                    transcript = response.text
                else:
                    result = response.json()
                    transcript = result.get('text', '')
                
                update_progress(1.0, "Transcription complete!")
                logger.info(f"Transcription successful, received {len(transcript)} characters")
                return transcript
            
            elif response.status_code == 429:
                error_msg = "OpenAI API rate limit exceeded. Please try again later."
                logger.error(f"API Rate Limit (429): {error_msg}")
                raise Exception(error_msg)
            
            elif response.status_code == 401:
                error_msg = "Invalid API key. Please check your OpenAI API key."
                logger.error(f"API Authentication Error (401): {error_msg}")
                raise Exception(error_msg)
            
            else:
                # Try to parse error details
                try:
                    error_data = response.json()
                    error_msg = error_data.get('error', {}).get('message', 'Unknown API error')
                except:
                    error_msg = f"API error (status {response.status_code}): {response.text}"
                
                logger.error(f"API Error: {error_msg}")
                raise Exception(error_msg)
        
        except requests.exceptions.RequestException as req_error:
            # If direct API call fails due to request issues, try OpenAI client library
            logger.warning(f"Direct API request failed: {str(req_error)}. Falling back to client library.")
            update_progress(0.3, "Direct API call failed, trying alternative method...")
            
            # Use OpenAI client library as fallback
            try:
                from openai import OpenAI
                
                # Create client
                client = OpenAI(api_key=api_key)
                
                update_progress(0.5, "Processing with OpenAI client...")
                
                # Set transcription options
                options = {}
                
                # Check for language code in session state
                if st.session_state.get('language_code') and st.session_state.get('language_code') != 'auto':
                    options['language'] = st.session_state.get('language_code')
                
                # Get model preference or use default
                model = st.session_state.get('transcription_model', 'whisper-1')
                
                response_format = st.session_state.get('response_format', 'text')
                
                # Make the API call
                with open(file_path, "rb") as audio_file:
                    update_progress(0.7, "Sending to OpenAI service...")
                    response = client.audio.transcriptions.create(
                        model=model,
                        file=audio_file,
                        response_format=response_format,
                        **options
                    )
                
                update_progress(0.9, "Processing response...")
                
                # Extract transcript based on response format
                if response_format == 'text':
                    transcript = response
                else:
                    transcript = response.text
                
                update_progress(1.0, "Transcription complete!")
                logger.info(f"Client library transcription successful, received {len(transcript)} characters")
                return transcript
            except Exception as client_error:
                logger.error(f"Client library transcription failed: {str(client_error)}")
                raise Exception(f"Transcription failed: {str(client_error)}")
        
        finally:
            # Clean up progress indicators
            progress_text.empty()
            progress_bar.empty()
    
    except Exception as e:
        error_msg = f"Error in transcribe_with_whisper: {str(e)}"
        logger.error(error_msg, exc_info=True)
        st.error(f"‚ùå {error_msg}")
        return f"[Error transcribing audio: {str(e)}]"

def show_user_config_page():
    """Show user configuration page"""
    st.markdown("## User Configuration")
    
    # Split into tabs
    user_tabs = st.tabs(["Prompts", "Knowledge Base"])
    
    # Prompts tab
    with user_tabs[0]:
        # Configure prompts using the new function that takes just the prompts dictionary
        configure_prompts(st.session_state.prompts)
    
    # Knowledge Base tab  
    with user_tabs[1]:
        st.markdown("### Knowledge Base")
        st.write("Upload files for your knowledge base. These will be used to customize content generation.")
        
        kb_path = "prompts/knowledge_base"
        os.makedirs(kb_path, exist_ok=True)
            
            # List existing knowledge base files
        st.markdown("#### Current Knowledge Base Files")
        kb_files = [f for f in os.listdir(kb_path) if f.endswith(('.txt', '.md'))]
        
        if not kb_files:
            st.info("No knowledge base files found. Upload files below.")
        else:
            for file in kb_files:
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.write(file)
                with col2:
                    if st.button("Delete", key=f"delete_{file}"):
                        try:
                            os.remove(os.path.join(kb_path, file))
                            st.success(f"Deleted {file}")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"Error deleting file: {str(e)}")
                    
        # Upload new files
        st.markdown("#### Upload New Files")
        st.write("Upload .txt or .md files to add to your knowledge base.")
        
        uploaded_file = st.file_uploader("Upload Knowledge Base File", type=["txt", "md"])
        
        if uploaded_file is not None:
            # Get filename and save
            file_details = {"FileName": uploaded_file.name, "FileType": uploaded_file.type}
            save_path = os.path.join(kb_path, uploaded_file.name)
            
            try:
                with open(save_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                st.success(f"Saved file: {uploaded_file.name}")
                # Reload knowledge base
                st.session_state.knowledge_base = load_knowledge_base()
                st.rerun()
            except Exception as e:
                st.error(f"Error saving file: {str(e)}")
            
def get_prompt(prompt_type, prompts, default_prompts):
    """Get a prompt by type, falling back to default if not available"""
    return prompts.get(prompt_type, default_prompts.get(prompt_type, ""))

def save_prompt(prompt_type, prompt_content):
    """Save a prompt by type to the prompts directory"""
    try:
        with open(os.path.join("prompts", f"{prompt_type}.md"), "w") as f:
            f.write(prompt_content)
        return True
    except Exception as e:
        st.error(f"Error saving prompt: {str(e)}")
        return False

def load_knowledge_base():
    """Load knowledge base files"""
    knowledge_base = {}
    kb_path = 'prompts/knowledge_base'
    
    if os.path.exists(kb_path):
        for file in os.listdir(kb_path):
            if file.endswith(('.txt', '.md')):
                with open(os.path.join(kb_path, file), 'r') as f:
                    name = os.path.splitext(file)[0].replace('_', ' ').title()
                    knowledge_base[name] = f.read()
    
    return knowledge_base

if __name__ == "__main__":
    main() 
